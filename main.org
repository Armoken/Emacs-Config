#+TITLE: Main

Editor settings

* Configuration
** Global
*** Lexical casting
    #+BEGIN_SRC emacs-lisp :tangle yes
      ;; -*- lexical-binding: t; -*-
    #+END_SRC

*** Cleaning screen                                                                             :ui:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq inhibit-splash-screen   t
            inhibit-startup-message t)

      ;; Disable dialog box
      (setq use-dialog-box nil)

      ;; Disable indicators
      (setq-default indicate-empty-lines t)
      (setq-default indicate-buffer-boundaries 'left)

      ;; Remove *scratch* buffer
      (if (get-buffer "*scratch*")
             (kill-buffer "*scratch*"))

      ;; Disable ring-bell-function
      ;; That called when whenever function ‘ding’ is called.
      (setq ring-bell-function 'ignore)
    #+END_SRC

*** Frame settings                                                                              :ui:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package frame
          :init
          ;; Disable cursor blink
          (blink-cursor-mode 0)

          (add-to-list 'default-frame-alist '(inhibit-double-buffering . t))

          ;; Name of current buffer in window title
          (setq frame-title-format "GNU Emacs: %b")

          ;; Fullscreen at GUI startup
          (add-to-list 'initial-frame-alist '(fullscreen . maximized))
          (add-to-list 'default-frame-alist '(fullscreen . maximized)))
    #+END_SRC

*** Theme                                                                                       :ui:
**** Global theme
     Also add it to ~/.Xresources to prevent blinking at startup:
     Emacs.Background:                    #292b2e
     Emacs.Foreground:                    #b2b2b2
     Emacs.BorderColor:                   #292b2e
     Emacs.SelectionForeground:           #b2b2b2
     Emacs.mode-line.attributeForeground: #b2b2b2
     Emacs.mode-line.attributeBackground: #292b2e
     and run xrdb -merge ~/.Xresources

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package spacemacs-theme
           :ensure t
           :no-require t
           :pin melpa
           :custom-face
           (org-link    ((nil :height 1.2)))
           (org-level-1 ((nil :height 1.2)))
           (org-level-2 ((nil :height 1.2)))
           (org-level-3 ((nil :height 1.2)))
           (org-level-4 ((nil :height 1.2)))
           (org-level-5 ((nil :height 1.2)))
           (org-level-6 ((nil :height 1.2)))
           (org-level-7 ((nil :height 1.2)))
           (org-level-8 ((nil :height 1.2)))

           (show-paren-match ((t (:background "purple4"))))
           (show-paren-mismatch
            ((((class color)) (:background "red" :foreground "white"))))

           :init
           (if (daemonp)
                   (add-hook 'after-make-frame-functions
                             (lambda (frame)
                                 (select-frame frame)
                                 (load-theme 'spacemacs-dark t)))
               (load-theme 'spacemacs-dark t)))
     #+END_SRC

**** Modeline theme
     #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
       (use-package doom-modeline
           :ensure t
           :defines (nyan-minimum-window-width)
           :init
           (doom-modeline-mode 1)

           :config
           (setq
            ;; How tall the mode-line should be. It's only respected in GUI.
            ;; If the actual char height is larger, it respects the actual height.
            doom-modeline-height             21

            ;; How wide the mode-line bar should be. It's only respected in GUI.
            doom-modeline-bar-width          3

            ;; The limit of the window width.
            ;; If `window-width' is smaller than the limit, some information won't
            ;; be displayed.
            doom-modeline-window-width-limit fill-column

            ;; How to detect the project root.
            ;; The default priority of detection is `ffip'
            ;;                                         > `projectile'
            ;;                                         > `project'.
            ;; nil means to use `default-directory'.
            ;; The project management packages have some issues on detecting
            ;; project root. e.g. `projectile' doesn't handle symlink folders
            ;; well, while `project' is unable to hanle sub-projects.
            ;; You can specify one if you encounter the issue.
            doom-modeline-project-detection        'projectile

            doom-modeline-buffer-file-name-style   'buffer-name

            ;; Whether display icons in the mode-line.
            ;; Respects `all-the-icons-color-icons'.
            ;; While using the server mode in GUI, should set the value
            ;; explicitly.
            doom-modeline-icon                     (display-graphic-p)
            doom-modeline-major-mode-icon          t
            doom-modeline-major-mode-color-icon    t
            doom-modeline-buffer-state-icon        t
            doom-modeline-buffer-modification-icon t
            ;; Whether display the modal state icon.
            ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys',
            ;; etc.
            doom-modeline-modal-icon                 t
            ;; Whether display the perspective name. Non-nil to display in the
            ;; mode-line.
            doom-modeline-persp-name                 t
            ;; If non nil the default perspective name is displayed in the
            ;; mode-line.
            doom-modeline-display-default-persp-name t
            ;; If non nil the perspective name is displayed alongside a folder
            ;; icon.
            doom-modeline-persp-icon                 t
            ;; Whether display the `lsp' state. Non-nil to display in the
            ;; mode-line.
            doom-modeline-lsp                        t

            doom-modeline-unicode-fallback           nil
            doom-modeline-minor-modes                nil
            doom-modeline-enable-word-count          nil

            ;; Major modes in which to display word count continuously.
            ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
            ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
            ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
            doom-modeline-continuous-word-count-modes '(markdown-mode
                                                        gfm-mode
                                                        org-mode)

            ;; Whether display the buffer encoding.
            doom-modeline-buffer-encoding              t

            ;; Whether display the indentation information.
            doom-modeline-indent-info                  t

            ;; If non-nil, only display one number for checker information if applicable.
            doom-modeline-checker-simple-format        t

            ;; The maximum number displayed for notifications.
            doom-modeline-number-limit                99

            ;; The maximum displayed length of the branch name of version
            ;; control.
            doom-modeline-vcs-max-length              12

            ;; Whether display the GitHub notifications. It requires `ghub' package.
            doom-modeline-github          nil
            doom-modeline-github-interval (* 30 60)

            ;; Whether display the mu4e notifications. It requires `mu4e-alert'
            ;; package.
            doom-modeline-mu4e       nil

            ;; Whether display the gnus notifications.
            doom-modeline-gnus       t
            ;; Wheter gnus should automatically be updated and how often
            ;; (set to nil to disable)
            doom-modeline-gnus-timer 2

            ;; Whether display the IRC notifications. It requires `circe'
            ;; or `erc' package.
            doom-modeline-irc         nil
            ;; Function to stylize the irc buffer names.
            doom-modeline-irc-stylize 'identity

            ;; Whether display the environment version.
            doom-modeline-env-version       nil
            ;; Or for individual languages
            doom-modeline-env-enable-python nil
            doom-modeline-env-enable-ruby   nil
            doom-modeline-env-enable-perl   nil
            doom-modeline-env-enable-go     nil
            doom-modeline-env-enable-elixir nil
            doom-modeline-env-enable-rust   nil

            ;; What to dispaly as the version while a new one is being loaded
            doom-modeline-env-load-string        "..."

            ;; Hooks that run before/after the modeline version string is
            ;; updated
            doom-modeline-before-update-env-hook nil
            doom-modeline-after-update-env-hook  nil)

           <<modeline-current-line-segment>>
           <<modeline-custom-modeline-setup>>)
     #+END_SRC

***** Current line segment
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref modeline-current-line-segment
        (doom-modeline-def-segment ayrc/my-current-line
            "The buffer position information."
            (let* ((active                    (doom-modeline--active))
                   (lines-count               (int-to-string (count-lines (point-min) (point-max))))
                   (_lines-only               '(concat "%l/" lines-count))
                   (_lines-and-columns        '(concat "%l/" lines-count ":%c"))
                   (_lines-and-columns-as-one '(concat "%l/" lines-count ":%C"))
                   (_columns-only             '(if doom-modeline-column-zero-based ":%c" ":%C"))
                   (lc                        '(line-number-mode
                                                (column-number-mode
                                                 (doom-modeline-column-zero-based '_lines-and-columns '_lines-and-columns-as-one)
                                                 '_lines-only)
                                                (column-number-mode '_columns-only)))
                   (face                      (if active 'mode-line 'mode-line-inactive))
                   (mouse-face                'mode-line-highlight)
                   (local-map                 mode-line-column-line-number-mode-map))
                (ignore lines-count)
                (concat
                 (doom-modeline-spc)
                 (doom-modeline-spc)

                 (propertize (format-mode-line (eval (symbol-value lc)))
                             'face face
                             'help-echo "Buffer position\n\
        mouse-1: Display Line and Column Mode Menu"
                             'mouse-face mouse-face
                             'local-map local-map)

                 (if (and active
                          (bound-and-true-p nyan-mode)
                          (>= (window-width) nyan-minimum-window-width))
                         (concat
                          (doom-modeline-spc)
                          (doom-modeline-spc)
                          (propertize (nyan-create) 'mouse-face mouse-face))
                     (when doom-modeline-percent-position
                         (concat
                          (doom-modeline-spc)
                          (propertize (format-mode-line '("" doom-modeline-percent-position "%%"))
                                      'face face
                                      'help-echo "Buffer percentage\n\
        mouse-1: Display Line and Column Mode Menu"
                                      'mouse-face mouse-face
                                      'local-map local-map))))

                 (when (or line-number-mode
                           column-number-mode
                           doom-modeline-percent-position)
                     (doom-modeline-spc)))))
      #+END_SRC

***** Custom modeline setup
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref modeline-custom-modeline-setup
        (doom-modeline-def-modeline 'ayrc/my-simple-line
            '(bar
              matches
              buffer-info
              remote-host
              ayrc/my-current-line
              parrot
              selection-info)
            '(misc-info
              input-method
              buffer-encoding
              major-mode
              process
              vcs
              lsp
              checker))

        (defun ayrc/setup-custom-doom-modeline ()
            (doom-modeline-set-modeline 'ayrc/my-simple-line t))
        (add-hook 'doom-modeline-mode-hook 'ayrc/setup-custom-doom-modeline)
      #+END_SRC

*** Bookmarks
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package bookmark
          :defer t
          :config
          (setq bookmark-save-flag 1))
    #+END_SRC

*** Backups in /tmp
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package files
          :init
          (setq
           backup-directory-alist         `((".*" . ,temporary-file-directory))
           auto-save-file-name-transforms `((".*" ,temporary-file-directory t))))
    #+END_SRC

*** [[https://github.com/purcell/exec-path-from-shell][Use user ${PATH} from shell]]
    Make Emacs use the $PATH set up by the user's shell

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package exec-path-from-shell
          :ensure t
          :commands (exec-path-from-shell-initialize
                     exec-path-from-shell-copy-env)
          :config
          (setq exec-path-from-shell-check-startup-files nil)

          (when (memq window-system '(mac ns x))
              (add-to-list 'exec-path-from-shell-variables "PYENV_ROOT")))
    #+END_SRC

*** Auto revert mode
    Revert buffers when files on disk change

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package autorevert
          :defer t
          :diminish auto-revert-mode)
    #+END_SRC

*** Abbrev mode
    Word abbreviations mode. In Abbrev mode, inserting an abbreviation causes
    it to expand and be replaced by its expansion

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package abbrev
          :defer t
          :commands (abbrev-mode)
          :diminish abbrev-mode
          :config
          (setq abbrev-file-name (ayrc/expand-config-path "./abbrev_defs")))
    #+END_SRC

*** Visual line mode
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq word-wrap t)
      (diminish 'visual-line-mode)
    #+END_SRC

*** Disable automatic line breaking
    When Auto Fill mode is enabled, inserting a space at a column
    beyond ‘current-fill-column’ automatically breaks the line at a
    previous space.

    This minor-mode have bad behavior almost in all modes.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (diminish 'auto-fill-function)

      (auto-fill-mode            -1)
      (remove-hook 'text-mode-hook #'turn-on-auto-fill)
    #+END_SRC

*** Indents
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default tab-width 4)
      (setq-default pc-basic-offset 4)
      (setq-default standart-indent 4)
      (setq-default indent-tabs-mode nil)
    #+END_SRC

*** Selection
**** Common clipboard with XServer/Wayland
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq select-enable-clipboard t)

       (use-package xclip
           :if (eq system-type 'gnu/linux)
           :ensure t
           :init
           (xclip-mode 1))

       (use-package pbcopy
           :if (eq system-type 'darwin)
           :ensure t
           :init
           (turn-on-pbcopy))
     #+END_SRC

**** Delete Selection mode
     If you enable Delete Selection mode, a minor mode,
     then inserting text while the mark is active causes the selected text
     to be deleted first. This also deactivates the mark. Many graphical
     applications follow this convention, but Emacs does not.

     #+BEGIN_SRC emacs-lisp :tangle yes
       (delete-selection-mode t)
     #+END_SRC

*** Set newline at the end of file
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq require-final-newline t)
      (setq next-line-add-newlines t)
    #+END_SRC

*** [[https://github.com/editorconfig/editorconfig-emacs][EditorConfig]]
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package editorconfig
          :ensure t
          :diminish editorconfig-mode
          :init
          (editorconfig-mode))
    #+END_SRC

*** Use 'y' and `n' instead of 'yes' and 'not'                                                  :ui:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

*** Scroll settings                                                                             :ui:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package pixel-scroll
          :bind (("M-n" . (lambda nil (interactive) (pixel-scroll-up 1)))
                 ("M-p" . (lambda nil (interactive) (pixel-scroll-down 1))))
          :init
          (pixel-scroll-mode)

          :config
          (setq-default
           ;; Disable bidirectional text rendering for a modest performance boost.
           ;; I've set this to `nil' in the past, but the `bidi-display-reordering's
           ;; docs say that is an undefined state and suggest this to be just as
           ;; good:
           bidi-display-reordering        'left-to-right
           bidi-paragraph-direction       'left-to-right

           ;; Reduce rendering/line scan work for Emacs by not rendering cursors or
           ;; regions in non-focused windows.
           cursor-in-non-selected-windows nil)

          (setq
           scroll-preserve-screen-position t
           scroll-margin                   0
           scroll-conservatively           10000

           ;; Never go back to the old scrolling behaviour.
           pixel-dead-time                 0

           ;; Scroll by number of pixels instead of
           ;; lines (t = frame-char-height pixels).
           pixel-resolution-fine-flag      t

           ;; Distance in pixel-resolution to scroll each mouse wheel event.
           mouse-wheel-scroll-amount       '(1)

           mouse-wheel-progressive-speed   nil

           ;; More performant rapid scrolling over unfontified regions. May cause
           ;; brief spells of inaccurate syntax highlighting right after scrolling,
           ;; which should quickly self-correct.
           ;; No (less) lag while scrolling lots.
           fast-but-imprecise-scrolling    t

           ;; Don’t compact font caches during GC.
           inhibit-compacting-font-caches  t

           ;; Just don't even fontify if we're still catching up on user input.
           jit-lock-defer-time             0

           highlight-nonselected-windows   nil))
    #+END_SRC

*** Highlighting                                                                                :ui:
**** Syntax                                                                                     :ui:
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package font-lock
           :defer t
           :commands (font-lock-mode global-font-lock-mode)
           :config
           (setq font-lock-maximum-decoration t))
     #+END_SRC

**** Expressions between {},[],()                                                               :ui:
     Highlight matching paren

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package paren
           :defer t
           :commands (show-paren-mode)
           :init
           (show-paren-mode)

           :config
           (setq show-paren-delay 0
                 show-paren-style 'expression))
     #+END_SRC

*** [[https://github.com/domtronn/all-the-icons.el][Icons]]                                                                                       :ui:
    A library for inserting Developer icons

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package all-the-icons
          :ensure t
          :defer t)
    #+END_SRC

*** Current line hightlight                                                                     :ui:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package hl-line
          :init
          (global-hl-line-mode 1))
    #+END_SRC

*** Line numbering                                                                              :ui:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package display-line-numbers
          :defer t
          :commands (display-line-numbers)
          :init
          (line-number-mode     t)
          (column-number-mode   t)

          ;; Don't show current buffer size
          (size-indication-mode nil)

          :config
          (setq display-line-numbers-width-start 5))
    #+END_SRC

*** Eldoc                                                                                       :ui:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package eldoc
          :diminish eldoc-mode
          :init
          (global-eldoc-mode -1))
    #+END_SRC

*** [[https://github.com/emacs-dashboard/emacs-dashboard][Dashboard]]                                                                                   :ui:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package dashboard
          :ensure t
          :diminish page-break-lines-mode
          :init
          (dashboard-setup-startup-hook)

          :config
          (setq initial-buffer-choice       (lambda ()  (get-buffer "*dashboard*"))
                dashboard-set-footer        nil
                dashboard-center-content    t
                dashboard-show-shortcuts    t
                dashboard-set-file-icons    t
                dashboard-set-heading-icons t
                dashboard-banner-logo-title "Welcome to Emacs"
                dashboard-items             '((recents  . 5)
                                              (bookmarks . 5)
                                              (projects . 5))))
    #+END_SRC

*** [[https://github.com/bbatsov/projectile][Project managment]]                                                                   :hotkeys:ui:
    #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
      (use-package projectile
          :ensure t
          :delight '(:eval (format "[P<%s>]" (projectile-project-name)))
          :bind (:map projectile-mode-map
                      ("<f9>"    . projectile-compile-project)
                      ("C-x p o" . projectile-switch-open-project)
                      ("C-x p s" . projectile-switch-project)
                      ("C-c p i" . projectile-invalidate-cache)
                      ("C-c p z" . projectile-cache-current-file)

                      ("C-c p s" . ayrc/helm-projectile-grep-or-rg)
                      ("C-c p h" . helm-projectile)
                      ("C-c p p" . helm-projectile-switch-project)
                      ("C-c p f" . helm-projectile-find-file)
                      ("C-c p F" . helm-projectile-find-file-in-known-projects)
                      ("C-c p g" . helm-projectile-find-file-dwim)
                      ("C-c p d" . helm-projectile-find-dir)
                      ("C-c p e" . helm-projectile-recentf)
                      ("C-c p a" . helm-projectile-find-other-file)
                      ("C-c p b" . helm-projectile-switch-to-buffer))
          :init
          <<helm-projectile>>
          (projectile-mode 1)

          :config
          (setq projectile-completion-system                     'helm
                projectile-switch-project-action                 'helm-projectile
                projectile-enable-caching                        t
                projectile-project-root-files-top-down-recurring (append '("compile_commands.json" ".cquery" ".ccls" ".clangd")
                                                                         projectile-project-root-files-top-down-recurring)))
    #+END_SRC

**** [[https://github.com/bbatsov/helm-projectile][Helm]]                                                                           :interactive:ui:
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes :noweb-ref helm-projectile
       (use-package helm-projectile
           :ensure t
           :defer t
           :commands (helm-projectile
                      helm-projectile-switch-project
                      helm-projectile-find-file
                      helm-projectile-find-file-in-known-projects
                      helm-projectile-find-file-dwim
                      helm-projectile-find-dir
                      helm-projectile-recentf
                      helm-projectile-find-other-file
                      helm-projectile-switch-to-buffer)

           :init
           <<projectile-helm-rg>>

           (defun ayrc/helm-projectile-grep-or-rg ()
               "Uses helm-projectile-grep, if ag doesn't present"
               (interactive)
               (if (executable-find "rg") (helm-projectile-rg)
                   (helm-projectile-grep))))
     #+END_SRC

***** [[https://github.com/cosmicexplorer/helm-rg][Ripgrep]]
      A helm interface to ripgrep

      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref projectile-helm-rg
        (use-package helm-rg
            :ensure t
            :commands (helm-projectile-rg))
      #+END_SRC

*** [[https://github.com/jaypei/emacs-neotree][NeoTree]]                                                                             :hotkeys:ui:
    A tree plugin like NerdTree for Vim

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package neotree
          :ensure t
          :bind ("<f1>" . neotree-toggle)
          :config
          (setq neo-window-width 40)
          (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
    #+END_SRC

*** [[https://emacs-helm.github.io/helm/][Helm]]                                                                                :hotkeys:ui:
    Incremental and narrowing framework

    #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
      (use-package helm
          :ensure t
          :diminish helm-mode
          :defines (helm-M-x-fuzzy-match
                    helm-mode-fuzzy-match
                    helm-imenu-fuzzy-match
                    helm-apropos-fuzzy-match
                    helm-recentf-fuzzy-match
                    helm-semantic-fuzzy-match
                    helm-lisp-fuzzy-completion
                    helm-completion-in-region-fuzzy-match)
          :bind
          (("M-x"       . helm-M-x)
           ("C-x C-b"   . helm-mini)
           ("C-x b"     . helm-mini)
           ("C-c h /"   . helm-find)
           ("C-c h h"   . helm-info)
           ("C-c h o"   . helm-occur)
           ("C-c h c"   . helm-semantic)
           ("C-c h i"   . helm-imenu)
           ("C-c h s"   . helm-rg)

           ;; Pre-configured helm to build regexps.
           ("C-c h r"   . helm-regexp)
           ("C-c h l"   . helm-bookmarks)
           ("C-c h a"   . helm-apropos)
           ("C-c h x"   . helm-register)
           ("C-c h m"   . helm-man-woman)
           ("C-x C-f"   . helm-find-files)
           ("M-y"       . helm-show-kill-ring)

           :map helm-map
           ;; rebind tab to do persistent action
           ("<tab>"     . helm-execute-persistent-action)
           ("C-i"       . helm-execute-persistent-action)
           ("C-z"       . helm-select-action))

          :init
          <<helm-rg>>

          (helm-mode 1)

          :config
          (setq helm-M-x-fuzzy-match                  t
                helm-mode-fuzzy-match                 t
                helm-imenu-fuzzy-match                t
                helm-locate-fuzzy-match               t
                helm-apropos-fuzzy-match              t
                helm-recentf-fuzzy-match              t
                helm-semantic-fuzzy-match             t
                helm-lisp-fuzzy-completion            t
                helm-buffers-fuzzy-matching           t
                helm-ff-search-library-in-sexp        t
                helm-ff-file-name-history-use-recentf t
                helm-completion-in-region-fuzzy-match t

                ;; Open helm buffer inside current window, not occupy whole
                ;; other window
                helm-split-window-inside-p           t

                ;; Move to end or beginning of source when reaching top or
                ;; bottom of source.
                helm-move-to-line-cycle-in-source     nil

                ;; Scroll 8 lines other window using M-<next>/M-<prior>
                helm-scroll-amount                    8

                helm-autoresize-max-height            50
                helm-autoresize-min-height            10


                helm-ff-file-name-history-use-recentf t)

          ;; Autoresize helm minibufer
          (helm-autoresize-mode t))
    #+END_SRC

**** [[https://github.com/cosmicexplorer/helm-rg][Ripgrep]]
     A helm interface to ripgrep

     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref helm-rg
       (use-package helm-rg
           :ensure t
           :commands (helm-rg))
     #+END_SRC

*** [[http://www.dr-qubit.org/undo-tree/undo-tree.el][Undo tree]]                                                                           :hotkeys:ui:
    Treat undo history as a tree

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package undo-tree
          :ensure t
          :diminish undo-tree-mode
          :bind (("C-x u" . undo-tree-visualize))
          :init
          (global-undo-tree-mode))
    #+END_SRC

*** [[https://github.com/syohex/emacs-anzu][Display in the modeline search information]]                                          :hotkeys:ui:
    Show number of matches in mode-line while searching

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package anzu
          :ensure t
          :defines (anzu-cons-mode-line-p)
          :defer t
          :diminish anzu-mode
          :bind (([remap query-replace]        . #'anzu-query-replace)
                 ([remap query-replace-regexp] . #'anzu-query-replace-regexp)

                 :map isearch-mode-map
                 ([remap isearch-query-replace]        . #'anzu-isearch-query-replace)
                 ([remap isearch-query-replace-regexp] . #'anzu-isearch-query-replace-regexp)))
    #+END_SRC

*** [[https://github.com/abo-abo/hydra][Hydra]]                                                                               :hotkeys:ui:
    Make bindings that stick around

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package hydra
          :ensure t
          :defer t
          :after (:any dap)
          :commands (defhydra))
    #+END_SRC

*** Subword mode                                                                           :hotkeys:
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package subword
          :defer t
          :commands (global-subword-mode)
          :diminish (subword-mode global-subword-mode)
          :init
          (defun ayrc/forward-word (&optional arg)
              (interactive "p")
              (let ((table (make-syntax-table)))
                  (modify-syntax-entry ?_ "_" table)
                  (with-syntax-table table
                      (forward-word arg))))
          (global-set-key (kbd "M-f") 'ayrc/forward-word)

          (defun ayrc/backward-word (&optional arg)
              (interactive "p")
              (let ((table (make-syntax-table)))
                  (modify-syntax-entry ?_ "_" table)
                  (with-syntax-table table
                      (backward-word arg))))
          (global-set-key (kbd "M-b") 'ayrc/backward-word)

          (defun ayrc/kill-word (&optional arg)
              (interactive "p")
              (let ((table (make-syntax-table)))
                  (modify-syntax-entry ?_ "_" table)
                  (with-syntax-table table
                      (kill-word arg))))
          (global-set-key (kbd "M-d") 'ayrc/kill-word)

          (defun ayrc/backward-kill-word (&optional arg)
              (interactive "p")
              (let ((table (make-syntax-table)))
                  (modify-syntax-entry ?_ "_" table)
                  (with-syntax-table table
                      (backward-kill-word arg))))
          (global-set-key (kbd "M-DEL")         'ayrc/backward-kill-word)
          (global-set-key (kbd "M-<backspace>") 'ayrc/backward-kill-word)

          (global-subword-mode 1))
    #+END_SRC

*** Hotkeys for changing size of buffers                                                   :hotkeys:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (global-set-key (kbd "<C-M-up>")    'shrink-window)
      (global-set-key (kbd "<C-M-down>")  'enlarge-window)
      (global-set-key (kbd "<C-M-left>")  'shrink-window-horizontally)
      (global-set-key (kbd "<C-M-right>") 'enlarge-window-horizontally)
    #+END_SRC

*** Layout switching                                                                       :hotkeys:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (global-set-key (kbd "<AltGr>") 'toggle-input-method)
    #+END_SRC

*** Movement between windows with M-arrow-keys (except org-mode)                           :hotkeys:
     #+BEGIN_SRC emacs-lisp :tangle yes
      (if (equal nil (equal major-mode 'org-mode))
          (windmove-default-keybindings 'meta))
     #+END_SRC

*** Add newline and indent on enter press                                                  :hotkeys:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (global-set-key (kbd "RET") 'newline-and-indent)
    #+END_SRC

*** Scroll screen without changing cursor position                                         :hotkeys:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (global-set-key (kbd "M-n") (lambda () (interactive) (scroll-up 1)))
      (global-set-key (kbd "M-p") (lambda () (interactive) (scroll-down 1)))
    #+END_SRC

*** Revert buffer                                                                          :hotkeys:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (global-set-key (kbd "<f5>") (lambda () (interactive) (revert-buffer)))
   #+END_SRC

*** [[https://github.com/abo-abo/avy][Jump to things in Emacs tree-style]]                                                     :hotkeys:
    Jump to arbitrary positions in visible text and select text quickly

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package avy
          :ensure t
          :bind (("C-;"     . avy-goto-char-2)
                 ("C-'"     . avy-goto-line)
                 ("M-g c"   . avy-goto-char)
                 ("M-g e"   . avy-goto-word-0)
                 ("M-g g"   . avy-goto-line)
                 ("M-g w"   . avy-goto-word-1)
                 ("M-g ("   . avy-goto-open-paren)
                 ("M-g )"   . avy-goto-close-paren)
                 ("M-g P"   . avy-pop-mark)
                 ("M-g M-g" . avy-goto-line))
          :config
          (setq avy-case-fold-search nil))
    #+END_SRC

*** [[https://github.com/magnars/expand-region.el][Expand region]]                                                                          :hotkeys:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package expand-region
        :ensure t
        :commands (er/expand-region)
        :bind ("C-=" . er/expand-region))
    #+END_SRC

*** [[https://github.com/ieure/scratch-el][Scratch buffer]]                                                                         :hotkeys:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package scratch
          :ensure t
          :defer t
          :bind ("C-c s" . #'scratch))
    #+END_SRC

*** Compilation                                                                            :hotkeys:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package compile
          :defer t
          :bind (
                 ;; Press to compile
                 ("<f9>" . 'compile)

                 ;; Errors switching
                 ("<f7>" . 'next-error)
                 ("<f8>" . 'previous-error)))
    #+END_SRC

** Non global
*** [[https://github.com/antonj/Highlight-Indentation-for-Emacs][Highlight indentation]]                                                                       :ui:
    Minor modes for highlighting indentation

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package highlight-indentation
          :ensure t
          :diminish highlight-indentation-mode
          :commands (highlight-indentation-mode)
          :custom-face
          (highlight-indentation                (("#e3e3d3")))
          (highlight-indentation-current-column (("#c3b3b3"))))
    #+END_SRC

*** [[http://elpa.gnu.org/packages/adaptive-wrap.html][Automatic line wrapping]]                                                                     :ui:
    This package provides the `adaptive-wrap-prefix-mode' minor mode which sets
    the wrap-prefix property on the fly so that single-long-line paragraphs get
    word-wrapped in a way similar to what you'd get with M-q using
    adaptive-fill-mode, but without actually changing the buffer's text.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package adaptive-wrap
          :ensure t
          :diminish adaptive-wrap-prefix-mode
          :hook (visual-line-mode . adaptive-wrap-prefix-mode)
          :commands (adaptive-wrap-prefix-mode)
          :config
          (progn
              (setq-default adaptive-wrap-extra-indent 2)))
    #+END_SRC

*** [[https://github.com/nflath/hungry-delete][Hungry delete]]                                                                          :hotkeys:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package hungry-delete
          :ensure t
          :diminish hungry-delete-mode
          :commands (hungry-delete-mode))
    #+END_SRC

*** [[https://github.com/hbin/smart-shift][Region shifting]]
    Smart shift text left/right.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package smart-shift
        :ensure t
        :diminish smart-shift-mode
        :bind
        (:map smart-shift-mode-map
              ("<C-up>" . smart-shift-up)
              ("<C-down>" . smart-shift-down)
              ("<C-left>" . smart-shift-left)
              ("<C-right>" . smart-shift-right)))
    #+END_SRC

*** [[https://github.com/lewang/ws-butler][Fixing up whitespaces only for touched lines]]
    Unobtrusively remove trailing whitespace

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package ws-butler
          :diminish ws-butler-mode
          :ensure t
          :commands (ws-butler-mode))
    #+END_SRC

*** [[https://github.com/Fuco1/smartparens][Automatically pairs braces and quotes]]
    Minor mode for Emacs that deals with parens pairs and tries to be smart
    about it

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package smartparens
          :ensure t
          :diminish smartparens-mode
          :commands (smartparens-mode smartparens-strict-mode)
          :bind (:map smartparens-mode-map
                      ("C-M-a" . sp-beginning-of-sexp)
                      ("C-M-e" . sp-end-of-sexp)

                      ("C-<down>" . sp-down-sexp)
                      ("C-<up>"   . sp-up-sexp)

                      ("C-M-f" . sp-forward-sexp)
                      ("C-M-b" . sp-backward-sexp)

                      ("C-M-n" . sp-next-sexp)
                      ("C-M-p" . sp-previous-sexp)

                      ("C-M-t" . sp-transpose-sexp)
                      ("M-k"   . sp-backward-kill-sexp)
                      ("C-M-w" . sp-copy-sexp)
                      ("C-M-d" . delete-sexp)

                      ("M-[" . sp-backward-unwrap-sexp)
                      ("M-]" . sp-unwrap-sexp)

                      ("C-x C-t" . sp-transpose-hybrid-sexp))
          :config
          (sp-pair "'" "'" :actions nil))
    #+END_SRC

*** [[https://github.com/Malabarba/aggressive-indent-mode][Aggressive Indent]]
    Emacs minor mode that keeps your code always indented.
    More reliable than electric-indent-mode.

    #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
      (use-package aggressive-indent
          :ensure t
          :commands (aggressive-indent-mode)
          :hook (aggressive-indent-mode . ayrc/aggressive-indent-hook)
          :diminish aggressive-indent-mode
          :init
          <<aggressive-indent-hook>>)
    #+END_SRC

***** Hook
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref aggressive-indent-hook
        (defun ayrc/aggressive-indent-hook ()
            (electric-indent-local-mode -1))
      #+END_SRC

*** Folding
**** Hideshow                                                                          :interactive:
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package hideshow
           :diminish hs-minor-mode
           :commands (hs-minor-mode)
           :bind
           (:map hs-minor-mode-map
                 ("C-c f TAB" . hs-toggle-hiding)
                 ("C-c f h"   . hs-hide-all)
                 ("C-c f s"   . hs-show-all))
           :init
           (progn
               ;; For yaml mode and others
               (defun ayrc/indenation-toggle-fold ()
                   "Toggle fold all lines larger than indentation on current line"
                   (interactive)
                   (let ((col 1))
                       (save-excursion
                           (back-to-indentation)
                           (setq col (+ 1 (current-column)))
                           (set-selective-display
                            (if selective-display nil (or col 1)))))))
           :config
           (progn
               (add-to-list 'hs-special-modes-alist
                            (list 'nxml-mode
                                  "<!--\\|<[^/>]*[^/]>"
                                  "-->\\|</[^/>]*[^/]>"
                                  "<!--"
                                  'nxml-forward-element
                                  nil))))
     #+END_SRC

**** Outline mode                                                                      :interactive:
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package outline
           :diminish outline-minor-mode
           :commands (outline-minor-mode)
           :bind (:map outline-minor-mode-map
                       ("C-c f TAB" . ayrc/outline-toggle-entry)
                       ("C-c f h"   . ayrc/outline-hide-all)
                       ("C-c f s"   . ayrc/outline-show-all))
           :hook (outline-minor-mode . ayrc/outline-hook)
           :init
           (defvar ayrc/outline-toggle-all-flag nil "toggle all flag")
           (defvar ayrc/cpos_save nil "current cursor position")

           (defun ayrc/outline-hook ()
               (make-local-variable 'ayrc/outline-toggle-all-flag)
               (make-local-variable 'ayrc/cpos_save))

           :config
           (defun ayrc/outline-toggle-entry ()
               (interactive)
               "Toggle outline hiding for the entry under the cursor"
               (if (progn
                       (setq ayrc/cpos_save (point))
                       (end-of-line)
                       (get-char-property (point) 'invisible))
                       (progn
                           (outline-show-subtree)
                           (goto-char ayrc/cpos_save))
                   (progn
                       (outline-hide-subtree)
                       (goto-char ayrc/cpos_save))))

           (defun ayrc/outline-show-all ()
               (interactive)
               "Show all outline hidings for the entire file"
               (setq ayrc/outline-toggle-all-flag nil)
               (outline-show-all))

           (defun ayrc/outline-hide-all ()
               (interactive)
               "Hide all outline hidings for the entire file"
               (setq ayrc/outline-toggle-all-flag t)
               (outline-hide-sublevels 1))

           (defun ayrc/outline-toggle-all ()
               (interactive)
               "Toggle outline hiding for the entire file"
               (if ayrc/outline-toggle-all-flag
                       (ayrc/outline-show-all)
                   (ayrc/outline-hide-all))))
     #+END_SRC

*** Spell checking
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package flyspell
          :defer t)
    #+END_SRC

*** Static code analysis
**** Flymake
     A universal on-the-fly syntax checker

     #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
       (use-package flymake
           :defer t
           :diminish flymake-mode
           :commands (flymake-mode)
           :init
           (progn
               <<helm-flymake-usepkg>>))
     #+END_SRC

***** [[https://github.com/tam17aki/helm-flymake][Helm]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref helm-flymake-usepkg
        (use-package helm-flymake
            :ensure t
            :defer t
            :after flymake
            :bind (:map flymake-mode-map
                        ("C-c h f" . helm-flymake))
            :commands (helm-flymake))
      #+END_SRC

**** [[http://www.flycheck.org][Flycheck]]
     On-the-fly syntax checking

     #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
       (use-package flycheck
           :ensure t
           :diminish flycheck-mode
           :commands (flycheck-mode)
           :hook (flycheck-mode . ayrc/flycheck-hook)
           :init
           <<helm-flycheck-usepkg>>
           <<flycheck-hook>>)
     #+END_SRC

***** [[https://github.com/yasuyk/helm-flycheck][Helm]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref helm-flycheck-usepkg
        (use-package helm-flycheck
            :ensure t
            :after flycheck
            :bind (:map flycheck-mode-map
                        ("C-c h f" . helm-flycheck))
            :commands (helm-flycheck))
      #+END_SRC

***** Hook
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref flycheck-hook
        (defun ayrc/flycheck-hook ()
            (flymake-mode -1)

            (setq flycheck-checker-error-threshold 700)
            (setq flycheck-standard-error-navigation nil)
            (setq flycheck-idle-change-delay 0)
            (setq flycheck-check-syntax-automatically '(save mode-enabled)))
      #+END_SRC

*** XREF
    Cross-referencing commands

    #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
      (use-package xref
          :defines (xref-show-definitions-function)
          :defer t
          :init
          <<helm-xref-usepkg>>

          (defun ayrc/setup-xref-hotkeys ()
              (ayrc/local-set-keys '(("M-,"     . xref-pop-marker-stack)
                                     ("M-?"     . xref-find-definitions)
                                     ("C-M-."   . xref-find-apropos)))))
    #+END_SRC

**** [[https://github.com/brotzeit/helm-xref][Helm]]
     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref helm-xref-usepkg
       (use-package helm-xref
           :ensure t
           :defer t
           :after xref
           :commands (helm-xref-show-xrefs
                      helm-xref-show-xrefs-27
                      helm-xref-show-defs-27)
           :init
           (if (< emacs-major-version 27)
                   (setq xref-show-xrefs-function 'helm-xref-show-xrefs)
               (setq xref-show-xrefs-function 'helm-xref-show-xrefs-27
                     xref-show-definitions-function 'helm-xref-show-defs-27)))
     #+END_SRC

*** [[http://github.com/joaotavora/yasnippet][Snippets]]
    #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
      (use-package yasnippet
          :ensure t
          :defer t
          :commands (yas-minor-mode yas-global-mode)
          :diminish yas-minor-mode
          :init
          <<snippets-collection>>

          :config
          (yasnippet-snippets-initialize)
          (setq yas-snippet-dirs
                (list (ayrc/expand-config-path "./personal-snippets")))

          (yas-reload-all))
    #+END_SRC

**** [[https://github.com/AndreaCrotti/yasnippet-snippets][Ready snippets collection]]
     A collection of yasnippet snippets for many languages

     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref snippets-collection
       (use-package yasnippet-snippets
           :ensure t
           :defer t
           :after yasnippet-snippets
           :commands (yasnippet-snippets-initialize))
     #+END_SRC

*** Autocompletion
**** Semantic
     Required for helm-semantic

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package semantic
           :diminish semantic-mode
           :commands (semantic-mode))
     #+END_SRC

**** [[http://company-mode.github.io/][Company]]
     #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
       (use-package company
           :ensure t
           :diminish company-mode
           :bind
           (:map company-active-map
                 ("<tab>" . company-complete-selection))
           :hook (company-mode . ayrc/company-hook)
           :init
           <<company-box-usepkg>>
           <<company-flx-usepkg>>
           <<company-quickhelp-usepkg>>
           <<company-setup-func>>
           <<company-hook>>)
     #+END_SRC

***** [[https://www.github.com/expez/company-quickhelp][Documentation]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref company-quickhelp-usepkg
        (use-package company-quickhelp
            :ensure t
            :after company
            :hook (company-mode . company-quickhelp-mode)
            :bind (:map company-active-map
                        ("M-h" . #'company-quickhelp-manual-begin)))
      #+END_SRC

***** [[https://github.com/PythonNut/company-flx][Fuzzy matching]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref company-flx-usepkg
        (use-package company-flx
            :ensure t
            :after company
            :hook (company-mode . company-flx-mode))
      #+END_SRC

***** [[https://github.com/sebastiencs/company-box][Icons]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref company-box-usepkg
        (use-package company-box
            :ensure t
            :disabled
            :after company
            :hook (company-mode . company-box-mode)
            :config
            (progn
                (setq company-box-icons-alist company-box-icons-all-the-icons)))
       #+END_SRC

***** Setup function
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref company-setup-func
        (defun ayrc/setup-company (&optional mode-specific-backends)
            (company-mode 1)
            (or mode-specific-backends (setq mode-specific-backends '()))

            (let ((backends (list mode-specific-backends
                                  '(company-files        ;; files & directories
                                    company-dabbrev-code ;; dynamic code abbreviations
                                    company-keywords)    ;; keywords

                                  '(company-abbrev       ;; abbreviations
                                    company-dabbrev))))  ;; dynamic abbreviat
                (make-local-variable 'company-backends)
                (setq company-backends (-non-nil backends))))
      #+END_SRC

***** Hook
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref company-hook
        (defun ayrc/company-hook ()
            (setq company-tooltip-align-annotations t
                  company-idle-delay                0.1
                  company-show-numbers              t
                  company-minimum-prefix-length     1))
      #+END_SRC

*** [[https://github.com/leoliu/ggtags][GTags]]
    Emacs frontend to GNU Global source code tagging system

    #+NAME: gtags-system-prerequisites
    #+CAPTION: System prerequisites for GTags
    - [[https://www.gnu.org/software/global/][GNU Global]] :: intall it and put [[file:~/.emacs.d/other/etc/gtags.conf][gtags configuration]] into HOME/.globalrc
                    or gtags.conf into project root

    #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
      (use-package ggtags
          :ensure t
          :diminish ggtags-mode
          :commands (ggtags-mode)
          :init
          <<helm-gtags-usepkg>>

          :config
          (setq ggtags-update-on-save nil)
          (setq ggtags-use-idutils t)
          (setq ggtags-sort-by-nearness t)
          (unbind-key "M-<" ggtags-mode-map)
          (unbind-key "M->" ggtags-mode-map))
    #+END_SRC

**** [[https://github.com/syohex/emacs-helm-gtags][Helm]]
     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref helm-gtags-usepkg
       (use-package helm-gtags
           :ensure t
           :after ggtags
           :commands (helm-gtags-select helm-gtags-find-tag)
           :config
           (setq helm-gtags-fuzzy-match t)
           (setq helm-gtags-preselect t)
           (setq helm-gtags-prefix-key "\C-cg")
           (setq helm-gtags-path-style 'relative)

           (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
           (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack))
     #+END_SRC

*** [[https://github.com/Microsoft/language-server-protocol/][LSP]]
    A common protocol for language servers

**** [[https://github.com/joaotavora/eglot][Eglot]]
     A client for Language Server Protocol servers

     #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
       (use-package eglot
           :ensure t
           :diminish eglot-mode
           :commands (eglot-mode eglot-ensure ayrc/eglot-hook)
           :hook (eglot-managed-mode . ayrc/eglot-hook)
           :init
           <<eglot-hook>>)
     #+END_SRC

***** Hook
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref eglot-hook
        (defun ayrc/eglot-hook ()
            (ayrc/local-set-keys '(("C-c r"   . eglot-rename)
                                   ("C-c C-r" . eglot-format)
                                   ("M-."     . eglot-find-implementation)))
            (ayrc/setup-xref-hotkeys)

            (add-to-list 'eglot-stay-out-of 'company)
            (ayrc/setup-company '(company-capf :with company-yasnippet)))
      #+END_SRC

**** [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]]
     Emacs client/library for the Language Server Protocol

     #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
       (use-package lsp-mode
           :ensure t
           :defines (lsp-eldoc-enable-signature-help
                     lsp-eldoc-prefer-signature-help)
           :diminish lsp-mode
           :commands (lsp-mode lsp-deffered lsp-rename)
           :hook (lsp-mode . ayrc/lsp-hook)
           :bind (:map lsp-mode-map
                       ("C-c h w" . helm-lsp-workspace-symbol))
           :init
           <<lsp-ui-usepkg>>
           <<helm-lsp-usepkg>>
           <<lsp-hook>>)
     #+END_SRC

***** Hook
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref lsp-hook
        (defun ayrc/lsp-hook ()
            (setq
             lsp-enable-folding                         t
             lsp-enable-indentation                     t
             lsp-enable-file-watchers                   t
             lsp-auto-configure                         nil
             lsp-enable-snippet                         nil
             lsp-keep-workspace-alive                   nil)

            (ayrc/local-set-keys '(("C-c r"   . lsp-rename)
                                   ("C-c C-r" . lsp-format-region)
                                   ("M-."     . lsp-ui-peek-find-definitions)
                                   ("M-,"     . xref-pop-marker-stack)
                                   ("M-?"     . lsp-ui-peek-find-references)
                                   ("C-M-."   . xref-find-apropos)))

            (flycheck-mode 1)
            (lsp-flycheck-enable)

            (ayrc/setup-company '(company-capf :with company-yasnippet))

            (lsp-ui-mode   1)
            (dap-mode      1))
      #+END_SRC

***** [[https://github.com/yyoncho/helm-lsp][Helm]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref helm-lsp-usepkg
        (use-package helm-lsp
            :ensure t
            :defer t
            :after lsp-mode
            :commands (helm-lsp-workspace-symbol))
      #+END_SRC

***** [[https://github.com/emacs-lsp/lsp-ui][UI modules]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref lsp-ui-usepkg
        (use-package lsp-ui
            :ensure t
            :defer t
            :after lsp-mode
            :defines (lsp-ui-flycheck-enable)
            :commands (lsp-ui-mode)
            :config
            (setq lsp-ui-peek-enable           nil
                  lsp-ui-sideline-enable       nil
                  lsp-ui-imenu-enable          t
                  lsp-ui-doc-enable            t
                  lsp-ui-flycheck-enable       t
                  lsp-ui-doc-include-signature nil
                  lsp-ui-sideline-show-symbol  nil))
      #+END_SRC

*** Debugging
**** [[http://github.com/realgud/realgud/][GUD]]
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package realgud
           :ensure t
           :defer t)
     #+END_SRC

**** [[https://github.com/yyoncho/dap-mode][DAP]]
     Debug Adapter Protocol mode

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package dap-mode
           :ensure t
           :defer t
           :after lsp-mode
           :defines (dap-lldb-debug-program)
           :diminish dap-mode
           :hook (dap-mode . ayrc/dap-hook)
           :init
           (defun ayrc/dap-hook ()
               (setq dap-lldb-debug-program '("/usr/bin/lldb-vscode"))
               (add-hook 'dap-stopped-hook
                         (lambda (_debug_session) (call-interactively #'dap-hydra)))

               ;; use tooltips for mouse hover
               ;; if it is not enabled `dap-mode' will use the minibuffer.
               (tooltip-mode 1)

               (dap-ui-mode 1)

               ;; enables mouse hover support
               (dap-tooltip-mode 1))

           :config
           (defun ayrc/dap-remove-nth-first-templates (count)
               "For removing useless dap templates after loading of
                   language specific dap parts"
               (setq dap-debug-template-configurations
                     (progn
                         (let ((rest-of-debug-templates
                                (nthcdr
                                 count
                                 dap-debug-template-configurations)))
                             (if (listp rest-of-debug-templates)
                                     '()
                                 rest-of-debug-templates))))))
     #+END_SRC

* Helpful functions
** Reload configuration                                                                :interactive:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun ayrc/reload-configuration ()
         "Reload configuration starting from ~/.emacs.d/init.el"
         (interactive)
         (load-file (ayrc/expand-config-path "./init.el")))

     (defun ayrc/reload-current-config ()
         (interactive)
         (let ((filename (buffer-file-name)))
             (if (string-equal (file-name-extension filename) "org")
                     (org-babel-load-file filename)
                 (load-file filename))))
   #+END_SRC

** Rename current buffer and file                                                      :interactive:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun ayrc/rename-current-file-and-buffer ()
       "Rename the current buffer and file it is visiting."
       (interactive)
       (let ((filename (buffer-file-name)))
         (if (not (and filename (file-exists-p filename)))
             (message "Buffer is not visiting a file!")
           (let ((new-name (read-file-name "New name: " filename)))
             (cond
              ((vc-backend filename) (vc-rename-file filename new-name))
              (t
               (rename-file filename new-name t)
               (set-visited-file-name new-name t t)))))))
   #+END_SRC

** Edit files as root                                                                  :interactive:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun ayrc/sudo-edit (&optional arg)
       "Edit currently visited file as root.

     With a prefix ARG prompt for a file to visit.
     Will also prompt for a file to visit if current
     buffer is not visiting a file."
       (interactive "P")
       (if (or arg (not buffer-file-name))
           (find-file (concat "/sudo:root@localhost:"
                              (ido-read-file-name "Find file(as root): ")))
         (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

   #+END_SRC

** Copy the current buffer file name to the clipboard                                  :interactive:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun ayrc/copy-file-name-to-clipboard ()
       "Copy the current buffer file name to the clipboard."
       (interactive)
       (let ((filename (if (equal major-mode 'dired-mode)
                           default-directory
                         (buffer-file-name))))
         (when filename
           (kill-new filename)
           (message "Copied buffer file name '%s' to the clipboard." filename))))
   #+END_SRC

** CRLF to LF                                                                          :interactive:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun ayrc/dos2unix (_buffer)
         "Automate M-% C-q C-m RET C-q C-j RET"
         (interactive "*b")
         (save-excursion
             (goto-char (point-min))
             (while (search-forward (string ?\C-m) nil t)
                 (replace-match (string ?\C-j) nil t))))
   #+END_SRC

** Copy hooks
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun ayrc/copy-hooks-to (from-hook to-hook)
       (dolist (hook from-hook)
         (add-hook to-hook hook)))
   #+END_SRC

** Find path to executable
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun ayrc/executable-find (command)
         "Search for COMMAND in `exec-path' and return the absolute file name.
     Return nil if COMMAND is not found anywhere in `exec-path'."
         ;; Use 1 rather than file-executable-p to better match the behavior of
         ;; call-process.
         (locate-file command exec-path exec-suffixes 1))
   #+END_SRC

** Set multiple local bindings
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun ayrc/local-set-keys (key-commands)
         "Set multiple local bindings with KEY-COMMANDS list."
         (let ((local-map (current-local-map)))
             (dolist (kc key-commands)
                 (define-key local-map
                     (kbd (car kc))
                     (cdr kc)))))
   #+END_SRC

** Functions for making text pretty                                                    :interactive:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun ayrc/tabify-buffer ()
         "Replace spaces by from buffer."
         (interactive)
         (tabify (point-min) (point-max)))

     (defun ayrc/untabify-buffer ()
         "Remove tabs from buffer."
         (interactive)
         (untabify (point-min) (point-max)))

     (defun ayrc/indent-buffer ()
       "Indent region."
       (interactive)
       (indent-region (point-min) (point-max)))

     (defun ayrc/cleanup-buffer-notabs ()
       "Perform a bunch of operations on the whitespace content of a buffer.
     Remove tabs."
       (interactive)
       (ayrc/indent-buffer)
       (ayrc/untabify-buffer)
       (delete-trailing-whitespace)
       nil)

     (defun ayrc/cleanup-buffer-tabs ()
         "Perform a bunch of operations on the whitespace content of a buffer.
     Dont remove tabs."
         (interactive)
         (ayrc/indent-buffer)
         (delete-trailing-whitespace)
         nil)
   #+END_SRC

* Org-mode
    #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
      (use-package org
          :defer t
          :commands (org-mode)
          :hook (org-mode . ayrc/orgmode-hook)
          :bind (:map org-mode-map
                      ("C-c M-l" . org-cliplink)
                      ("C-c h i" . helm-org-rifle-current-buffer))
          :init
          <<org-bullets-usepkg>>
          <<org-present-usepkg>>
          <<org-cliplink-usepkg>>
          <<helm-org-rifle>>

          (defun ayrc/orgmode-hook ()
              (display-line-numbers-mode 1)
              (visual-line-mode          1)
              (ws-butler-mode            1)
              (smartparens-mode          1)
              (semantic-mode             1)
              (yas-minor-mode            1)
              (ayrc/setup-company)

              (org-bullets-mode))

          :config
          (setq
           org-log-done 'time
           org-src-tab-acts-natively t
           org-tags-column -100

           org-todo-keywords '((sequence "TODO" "CURRENT" "|" "DONE" "CANCELED"))
           org-todo-keyword-faces '(("CURRENT" . "yellow")
                                    ("CANCELED" . (:foreground "RoyalBlue3"
                                                               :weight bold)))))
    #+END_SRC

** [[https://github.com/emacsorphanage/org-bullets][Bullets]]
   Show bullets in org-mode as UTF-8 characters

   #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-bullets-usepkg
     (use-package org-bullets
         :ensure t
         :defer t
         :after org
         :commands (org-bullets-mode))
   #+END_SRC

** [[https://github.com/rlister/org-present][Present]]
   Minimalist presentation minor-mode for Emacs org-mode

   #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-present-usepkg
     (use-package org-present
         :ensure t
         :defer t
         :after org
         :commands (org-present))
   #+END_SRC

** [[http://github.com/rexim/org-cliplink][Cliplink]]
   Insert org-mode links from the clipboard

   #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-cliplink-usepkg
     (use-package org-cliplink
         :ensure t
         :defer t
         :after org
         :commands (org-cliplink))
   #+END_SRC

** [[https://github.com/alphapapa/org-rifle][Helm]]
   #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref helm-org-rifle
     (use-package helm-org-rifle
         :ensure t
         :defer t
         :after org
         :commands (helm-org-rifle-current-buffer))
   #+END_SRC

* Clients
** VCS
*** [[https://github.com/magit/magit][Git]]                                                                             :global_hotkeys:
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package magit
           :ensure t
           :defines (magit-default-tracking-name-function
                     magit-status-buffer-switch-function
                     magit-save-some-buffers
                     magit-set-upstream-on-push)
           :commands (magit-get-top-dir)
           :bind (("C-x g" . magit-status))
           :hook (git-commit-mode-hook . magit-commit-mode-init)
           :init
           (progn
               (delete 'Git vc-handled-backends)

               ;; Close popup when commiting - this stops the commit window
               ;; hanging around
               ;; From: http://git.io/rPBE0Q
               (defadvice git-commit-commit (after delete-window activate)
                   (delete-window))

               (defadvice git-commit-abort (after delete-window activate)
                   (delete-window))

               ;; these two force a new line to be inserted into a commit window,
               ;; which stops the invalid style showing up.
               ;; From: http://git.io/rPBE0Q
               (defun magit-commit-mode-init ()
                   (when (looking-at "\n")
                       (open-line 1))))
           :config
           (progn
               ;; restore previously hidden windows
               (defadvice magit-quit-window (around magit-restore-screen activate)
                   (let ((current-mode major-mode))
                       ad-do-it
                       (when (eq 'magit-status-mode current-mode)
                           (jump-to-register :magit-fullscreen))))

               ;; magit settings
               (setq magit-default-tracking-name-function
                     'magit-default-tracking-name-branch-only
                     ;; open magit status in same window as current buffer
                     magit-status-buffer-switch-function 'switch-to-buffer
                     ;; highlight word/letter changes in hunk diffs
                     magit-diff-refine-hunk t
                     ;; ask me to save buffers
                     magit-save-some-buffers t
                     ;; ask me if I want a tracking upstream
                     magit-set-upstream-on-push 'askifnotset)))
	  #+END_SRC

*** [[https://github.com/emacsmirror/dsvn][Subversion]]
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package dsvn
          :ensure t
          :commands (svn-status svn-log svn-update))
    #+END_SRC

** Dired
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package dired
         :defer t
         :config
         (progn
             (setq dired-recursive-deletes 'top) ;; for deleting of empty dir
             (setq dired-recursive-deletes 'always)
             (setq dired-recursive-copies 'always)

             ;; if there is a dired buffer displayed in the next window, use its
             ;; current subdir, instead of the current subdir of this dired buffe
             (setq dired-dwim-target t)))
   #+END_SRC

** [[https://github.com/Silex/docker.el][Docker]]
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package docker
         :ensure t
         :bind ("C-c d" . docker))
   #+END_SRC

** [[https://github.com/chrisbarrett/kubernetes-el][Kubernetes]]
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package kubernetes
       :ensure t
       :commands (kubernetes-overview))
   #+END_SRC

* Languages
** Lisp dialects
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package lisp-mode
         :mode (("\\.el\\'"   .  emacs-lisp-mode)
                ("\\.rkt\\'"   . scheme-mode)
                ("\\.ss\\'"    . scheme-mode)
                ("\\.scm\\'"   . scheme-mode)
                ("\\.sch\\'"   . scheme-mode))
         :hook ((eval-expression-minibuffer-setup
                 . ayrc/eval-expression-minibuffer-setup-hook)
                (ielm-mode                        . ayrc/emacs-lisp-hook)
                (lisp-interaction-mode            . ayrc/emacs-lisp-hook)
                (emacs-lisp-mode                  . ayrc/emacs-lisp-hook)
                (scheme-mode                      . ayrc/scheme-hook))
         :init
         (progn
             <<rainbow-delimiters-usepkg>>
             <<lisp-extra-font-lock-usepkg>>
             <<elisp-slime-nav-usepkg>>
             <<geiser-usepkg>>

             ;; Mode with elisp is a first thind that user see
             <<lisp-hook>>
             <<emacs-lisp-hook>>))
   #+END_SRC

*** Common configuration for all lisp dialects
**** [[https://github.com/Fanael/rainbow-delimiters][Highlights delimiters]]
     Such as parentheses, brackets or braces according to their depth

     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref rainbow-delimiters-usepkg
       (use-package rainbow-delimiters
           :ensure t
           :commands (rainbow-delimiters-mode))
     #+END_SRC

**** [[https://github.com/Lindydancer/lisp-extra-font-lock][Highlight bound variables and quoted expressions in lisp]]
     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref lisp-extra-font-lock-usepkg
       (use-package lisp-extra-font-lock
           :ensure t
           :commands (lisp-extra-font-lock-mode)
           :diminish lisp-extra-font-lock-mode)
     #+END_SRC

**** Hook
     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref lisp-hook
       (defun ayrc/lisp-hook ()
           (display-line-numbers-mode 1)
           (visual-line-mode          1)

           (ws-butler-mode            1)
           (smart-shift-mode          1)
           (smartparens-mode          1)
           (semantic-mode             1)
           (yas-minor-mode            1)
           (abbrev-mode               1)

           (flycheck-mode             1)

           ;; eval-expression-minibuffer doesn't support this mode
           ;; (hs-minor-mode             -1)

           (aggressive-indent-mode    1)
           (add-hook 'after-change-major-mode-hook
                     (lambda() (electric-indent-mode -1)))

           (rainbow-delimiters-mode   1)
           (eldoc-mode                1)
           (lisp-extra-font-lock-mode 1)

           (prettify-symbols-mode     1)
           (setq prettify-symbols-unprettify-at-point 'right-edge)
           (push '(">=" . ?≥) prettify-symbols-alist)
           (push '("<=" . ?≤) prettify-symbols-alist)
           (push '("lambda"  . ?λ) prettify-symbols-alist)

           (setq lisp-body-indent 4)

           (add-hook 'write-contents-functions
                     'ayrc/cleanup-buffer-notabs nil t))
     #+END_SRC

*** Emacs Lisp
**** [[https://github.com/purcell/elisp-slime-nav][Navigation of source with M-. & M-,]]
     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref elisp-slime-nav-usepkg
       (use-package elisp-slime-nav
           :ensure t
           :commands (elisp-slime-nav-mode)
           :diminish elisp-slime-nav-mode)
     #+END_SRC

**** Hook
     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref emacs-lisp-hook
       (defun ayrc/emacs-lisp-hook ()
           (ayrc/lisp-hook)

           (hs-minor-mode t)
           (elisp-slime-nav-mode)

           (ayrc/setup-company '(company-elisp :with company-yasnippet)))

       (defun ayrc/eval-expression-minibuffer-setup-hook ()
           (ayrc/lisp-hook)

           (elisp-slime-nav-mode)

           (ayrc/setup-company '(company-elisp :with company-yasnippet)))
     #+END_SRC

*** [[http://www.nongnu.org/geiser/][Scheme]]
    #+NAME: scheme-system-prerequisites
    #+CAPTION: System prerequisites for Scheme packages
    - [[https://github.com/racket/racket][Racket]] :: General purpose, multi-paradigm Lisp-Scheme programming
                language
    - [[https://www.gnu.org/software/guile/][Guile]] :: GNU Ubiquitous Intelligent Language for Extensions

     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes :noweb-ref geiser-usepkg
       (use-package geiser
           :ensure t
           :defines (geiser-active-implementations)
           :commands (geiser-mode)
           :init
           <<scheme-hook>>)
     #+END_SRC

**** Hook
     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref scheme-hook
       (defun ayrc/scheme-hook ()
           (ayrc/lisp-hook)

           (hs-minor-mode 1)
           (geiser-mode   1)
           (setq geiser-active-implementations '(racket guile))

           (ayrc/setup-company '(company-capf :with company-yasnippet)))
     #+END_SRC

** C/C++
    #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
      (use-package cc-mode
          :mode (("\\.h\\'"   . c-mode)
                 ("\\.c\\'"   . c-mode)
                 ("\\.hpp\\'" . c++-mode)
                 ("\\.cpp\\'" . c++-mode))
          :hook ((c-mode   . ayrc/c-hook)
                 (c++-mode . ayrc/c++-hook))
          :init
          <<clang-format-usepkg>>
          <<irony-usepkg>>
          <<gtags-usepkg>>
          <<ccls-usepkg>>
          <<cmake-ide-usepkg>>
          <<modern-cpp-font-lock-usepkg>>

          <<cc-configuration>>
          <<c-configuration>>
          <<c++-configuration>>

          :config
          (setq c-basic-offset       4
                tab-width            4
                c-tab-always-indent  t
                c-default-style      '((c-mode    . "k&r")
                                       (c++-mode  . "stroustrup")
                                       (java-mode . "java"))
                c-doc-comment-style  '((java-mode . javadoc)
                                       (c-mode    . javadoc)
                                       (c++-mode  . javadoc))))
    #+END_SRC

*** CC configuration
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref cc-configuration
      (defun ayrc/cc-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (abbrev-mode               1)
          (semantic-mode             1)
          (yas-minor-mode            1)
          (hs-minor-mode             1)
          (hungry-delete-mode        1)

          ;; Setup minor mods if any component need it
          (let ((conf-variables-for-cc (list ayrc/cc-eldoc-plugin
                                             ayrc/cc-syntax-check-plugin
                                             ayrc/cc-autocompletion-plugin)))
              (if (member "irony" conf-variables-for-cc)
                      (ayrc/irony-setup))
              (if (member "gtags" conf-variables-for-cc)
                      (ayrc/gtags-setup))
              (if (member "ccls" conf-variables-for-cc)
                      (ayrc/ccls-setup)))

          ;; Autocompletion setup
          (funcall (pcase ayrc/cc-autocompletion-plugin
                       ("irony"  'ayrc/irony-autocompletion-setup)
                       ("gtags"  'ayrc/gtags-autocompletion-setup)
                       ("ccls"   'ayrc/ccls-autocompletion-setup)))

          ;; Syntax check setup
          (funcall (pcase ayrc/cc-syntax-check-plugin
                       ("irony"  'ayrc/irony-syntax-check-setup)
                       ("gtags"  'ayrc/gtags-syntax-check-setup)
                       ("ccls"   'ayrc/ccls-syntax-check-setup)))

          ;; Eldoc setup
          (funcall (pcase ayrc/cc-eldoc-plugin
                       ("irony"  'ayrc/irony-eldoc-setup)
                       ("gtags"  'ayrc/gtags-eldoc-setup)
                       ("ccls"   'ayrc/ccls-eldoc-setup))))
    #+END_SRC

**** [[https://github.com/sonatard/clang-format][Clang Format]]
     Format code using clang-format

     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref clang-format-usepkg
       (use-package clang-format
           :ensure t
           :defer t
           :after cc-mode
           :commands (clang-format clang-buffer clang-format-region))
     #+END_SRC

**** [[https://github.com/Sarcasm/irony-mode][Irony]]
     A C/C++ minor mode for Emacs powered by libclang

     #+NAME: irony-system-prerequisites
     #+CAPTION: System prerequisites for Irony packages
     - [[https://github.com/Sarcasm/irony-mode][irony-server]] :: A C/C++ minor mode for Emacs powered by libclang

     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes :noweb-ref irony-usepkg
       (use-package irony
           :ensure t
           :defer t
           :after cc-mode
           :defines (irony-cdb-compilation-databases)
           :diminish irony-mode
           :commands (irony-mode)
           :init
           <<irony-autocompletion-usepkg>>
           <<irony-syntax-analytics-usepkg>>
           <<irony-eldoc-usepkg>>

           <<irony-autocompletion-config>>
           <<irony-syntax-analytics-config>>
           <<irony-eldoc-config>>

           (defun ayrc/irony-setup ()
               (ayrc/local-set-keys '(("C-c C-r" . clang-format-region)))

               (setq irony-server-install-prefix
                     (concat user-emacs-directory
                             "/contrib/servers/irony"))

               (irony-mode 1)))
     #+END_SRC

***** Autocompletion
****** Packages
       #+BEGIN_SRC emacs-lisp :tangle no :noweb yes :noweb-ref irony-autocompletion-usepkg
         <<irony-company-usepkg>>
         <<irony-company-c-headers-usepkg>>
       #+END_SRC

******* [[https://github.com/Sarcasm/company-irony][Company]]
        Company mode completion back-end for Irony

        #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref irony-company-usepkg
          (use-package company-irony
              :ensure t
              :defer t
              :after irony
              :commands (company-irony
                         company-irony-setup-begin-commands))
        #+END_SRC

******* [[https://github.com/hotpxl/company-irony-c-headers][Company C headers]]
        Company mode backend for C/C++ header files with Irony

        #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref irony-company-c-headers-usepkg
          (use-package company-irony-c-headers
              :ensure t
              :defer t
              :after irony
              :commands (company-irony-c-headers))
        #+END_SRC

****** Configuration
       #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref irony-autocompletion-config
         (defun ayrc/irony-autocompletion-setup ()
             (setq company-irony-ignore-case 'smart

                   ;; Use compilation database first, clang_complete as fallback.
                   irony-cdb-compilation-databases '(irony-cdb-libclang
                                                     irony-cdb-clang-complete))

             (ayrc/setup-company '(company-irony :with
                                                 company-irony-c-headers
                                                 company-yasnippet))

             (define-key irony-mode-map [remap completion-at-point]
                 'irony-completion-at-point-async)
             (define-key irony-mode-map [remap complete-symbol]
                 'irony-completion-at-point-async)
             (irony-cdb-autosetup-compile-options)

             ;; (optional) adds CC special commands to
             ;; `company-begin-commands' in order to
             ;; trigger completion at interesting places, such as after
             ;; scope operator std::|
             (company-irony-setup-begin-commands))
       #+END_SRC

***** [[https://github.com/Sarcasm/flycheck-irony][Syntax analytics]]
      C, C++ and Objective-C support for Flycheck, using Irony Mode

      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref irony-syntax-analytics-usepkg
        (use-package flycheck-irony
            :ensure t
            :defer t
            :after irony
            :commands (flycheck-irony-setup))
      #+END_SRC

      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref irony-syntax-analytics-config
        (defun ayrc/irony-syntax-check-setup ()
            (flycheck-mode        1)
            (flycheck-irony-setup))
      #+END_SRC

***** [[https://github.com/ikirill/irony-eldoc][Eldoc]]
      Irony mode support for eldoc-mode

      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref irony-eldoc-usepkg
        (use-package irony-eldoc
            :ensure t
            :defer t
            :after irony
            :commands (irony-eldoc))
      #+END_SRC

      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref irony-eldoc-config
        (defun ayrc/irony-eldoc-setup ()
            (eldoc-mode  1)
            (irony-eldoc 1))
      #+END_SRC

**** [[https://github.com/leoliu/ggtags][GTags]]
     Emacs frontend to GNU Global source code tagging system

     #+NAME: gtags-system-prerequisites
     #+CAPTION: System prerequisites for GTags packages
     - [[https://www.gnu.org/software/global/global.html][GNU Global]] :: tag system to find an object location in various sources

     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes :noweb-ref gtags-usepkg
       (use-package ggtags
           :ensure t
           :defer t
           :after cc-mode
           :commands (ggtags-mode)
           :init
           <<gtags-autocompletion-config>>
           <<gtags-syntax-analytics-config>>
           <<gtags-eldoc-config>>

           (defun gtags-setup ()
               (ayrc/local-set-keys '(("C-c C-r" . clang-format-region)))

               (setq-local imenu-create-index-function
                           #'ggtags-build-imenu-index)

               (ggtags-mode 1)))
     #+END_SRC

***** Autocompletion
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref gtags-autocompletion-config
        (defun ayrc/gtags-autocompletion-setup ()
            (ayrc/setup-company '(company-gtags :with company-yasnippet)))
      #+END_SRC

***** Syntax analytics
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref gtags-syntax-analytics-config
        (defun ayrc/gtags-syntax-check-setup ()
            (flycheck-mode 1))
      #+END_SRC

***** Eldoc
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref gtags-eldoc-config
        (defun ayrc/gtags-eldoc-setup ()
            (eldoc-mode 1))
      #+END_SRC

**** [[https://github.com/MaskRay/emacs-ccls][ccls]]
     Emacs client for ccls, a C/C++ language server

     #+NAME: ccls-system-prerequisites
     #+CAPTION: System prerequisites for CCLS packages
     - [[https://github.com/MaskRay/ccls][ccls]] :: C/C++/ObjC language server supporting cross references,
               hierarchies, completion and semantic highlighting

     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes :noweb-ref ccls-usepkg
       (use-package ccls
           :ensure t
           :defer t
           :after cc-mode
           :defines (ccls-extra-init-params)
           :diminish ccls-code-lens-mode
           :init
           <<ccls-autocompletion-config>>
           <<ccls-syntax-analytics-config>>
           <<ccls-eldoc-config>>

           (defun ayrc/ccls-setup ()
               (require 'ccls)
               (setq ccls-executable (executable-find "ccls"))

               ;; Log file
               ;; (setq ccls-args '("--log-file=/tmp/ccls-9999.log"))

               (setq ccls-extra-init-params
                     '(
                       :index       (:comments 2)
                       :completion  (:detailedLabel t)))

               ;; Add a lot of highlight mistakes
               ;; (setq ccls-sem-highlight-method 'overlay)

               (lsp-deferred)
               <<ccls-debug-support>>))
     #+END_SRC

***** Autocompletion
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref ccls-autocompletion-config
        (defun ayrc/ccls-autocompletion-setup ())
      #+END_SRC

***** Syntax analytics
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref ccls-syntax-analytics-config
        (defun ayrc/ccls-syntax-check-setup ())
      #+END_SRC

***** Eldoc
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref ccls-eldoc-config
        (defun ayrc/ccls-eldoc-setup ()
            (eldoc-mode 1))
      #+END_SRC

***** Debug support
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref ccls-debug-support
        (require 'dap-lldb)
        (ayrc/dap-remove-nth-first-templates 1)

        (dap-register-debug-template
         "AYRC Initial Configuration of LLDB::Run"
         (list :type "lldb"
               :cwd "absolute path to working directory"
               :request "launch"
               :program "absolute path to executable"
               :args (list
                      "--first_flag"
                      "--second_flag" "third_argumnt")
               :name "LLDB::Run"))
      #+END_SRC

**** [[https://github.com/atilaneves/cmake-ide][CMake IDE]]
     Use Emacs as a C/C++ IDE

     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref cmake-ide-usepkg
       (use-package cmake-ide
           :ensure t
           :defer t
           :after cc-mode
           :commands (cmake-ide-setup))
     #+END_SRC

*** C configuration
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref c-configuration
      (defun ayrc/c-hook ()
          (ayrc/cc-hook)

          (setq clang-format-style               "Linux"
                flycheck-clang-language-standard "c99"
                irony-additional-clang-options   '("-Wall"
                                                   "-Wextra")))
    #+END_SRC

*** C++ configuration
**** [[https://github.com/ludwigpacifici/modern-cpp-font-lock][Font-lock]]
     C++ font-lock for Emacs

     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref modern-cpp-font-lock-usepkg
       (use-package modern-cpp-font-lock
           :ensure t
           :defer t
           :after cc-mode
           :diminish modern-c++-font-lock-mode
           :commands (modern-c++-font-lock-mode))
     #+END_SRC

**** Hook
     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref c++-configuration
       (defun ayrc/c++-hook ()
           (ayrc/cc-hook)

           (modern-c++-font-lock-mode 1)

           (setq clang-format-style               "Google"
                 flycheck-clang-language-standard "c++17"
                 irony-additional-clang-options   '("-Wall"
                                                    "-Wextra")))
     #+END_SRC

** Python
*** [[https://gitlab.com/python-mode-devs/python-mode][Python]]
      Python mode settings for Emacs

    #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
      (use-package python-mode
          :ensure t
          :mode (("wscript"   . python-mode)
                 ("\\.py\\'"  . python-mode))
          :hook (python-mode . ayrc/python-hook)
          :bind (:map python-mode-map
                      ("C-c i" . run-python))
          :init
          <<venv-support-packages>>
          <<sphinx-doc-usepkg>>
          <<python-hook>>

          :config
          <<python-install-pkgs>>)
    #+END_SRC

**** Prerequisites
     Installation path: pyenv -> python
                              -> virtualenv
                              -> install all packages by running function above
***** System
      #+NAME: python-system-prerequisites
      #+CAPTION: System prerequisites for python packages
      - [[https://www.python.org/][Python]] :: The Python programming language
      - [[https://github.com/pyenv/pyenv][Pyenv]] :: [[https://github.com/pyenv/pyenv-installer][pyenv-installer]] and take a look at [[https://github.com/pyenv/pyenv/wiki/Common-build-problems][common build problems]]
      - [[https://github.com/pypa/pipenv][Pipenv]] :: Python Development Workflow for Humans
      - [[https://python-poetry.org/][Poetry]] :: Python dependency management and packaging made easy

***** Language
      #+NAME: python-language-prerequisites
      #+CAPTION: Language prerequisites for python packages

      Add language prerequisite to this list after its first mention in
      list after function definition below:
      #+BEGIN_SRC emacs-lisp :tangle no :noweb yes :noweb-ref python-install-pkgs
        (defvar ayrc/python-language-prerequisites '()
            "Dependencies for fully working python mode")

        (defun ayrc/install-python-language-prerequisites ()
            "Install python language prerequisites.

                Prerequisites listed in ayrc/python-language-prerequisites
                global variable"
            (interactive)
            (when (and (buffer-modified-p)
                       (y-or-n-p (format "Save file %s? " (buffer-file-name))))
                (save-buffer))

            (let* ((buf-name "*prerequisites-installation*")
                   (buffer (get-buffer-create buf-name))
                   (process (get-buffer-process buffer))
                   (cmd-args (append (list "-m" "pip" "install")
                                     ayrc/python-language-prerequisites)))
                (when (and process
                           (process-live-p process))
                    (setq buffer (generate-new-buffer buf-name)))

                (with-current-buffer buffer
                    (let ((inhibit-read-only t))
                        (erase-buffer))

                    (insert "Installing python language prerequisites\n")

                    (pythonic-start-process
                     :process "PrerequisitesInstaller"
                     :buffer buffer
                     :args cmd-args)

                    (move-marker (process-mark (get-buffer-process buffer))
                                 (point-max)
                                 buffer)

                    (comint-mode)
                    (setq-local comint-prompt-read-only t)
                    (pop-to-buffer buffer))))

        <<python-pyls>>
        <<python-pyls-isort>>
        <<python-pyls-black>>
        <<python-pylint>>
        <<python-jedi>>
        <<python-rope>>
        <<python-pyflakes>>
        <<python-mccabe>>
        <<python-pycodestyle>>
        <<python-pydocstyle>>
        <<python-autopep8>>
        <<python-yapf>>
        <<python-ipython>>
      #+END_SRC

      Prerequisites:
****** [[https://github.com/palantir/python-language-server][pyls]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref python-pyls
      (add-to-list 'ayrc/python-language-prerequisites "python-language-server")
      #+END_SRC

****** [[https://github.com/tomv564/pyls-mypy][pyls-mypy]]                      :temporary_disabled:
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref python-pyls-mypy
        (add-to-list 'ayrc/python-language-prerequisites "pyls-mypy")
      #+END_SRC

****** [[https://github.com/tomv564/pyls-mypy][pyls-isort]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref python-pyls-isort
      (add-to-list 'ayrc/python-language-prerequisites "pyls-isort")
      #+END_SRC

****** [[https://github.com/tomv564/pyls-mypy][pyls-black]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref python-pyls-black
      (add-to-list 'ayrc/python-language-prerequisites "pyls-black")
      #+END_SRC

****** [[https://www.pylint.org/][Pylint]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref python-pylint
      (add-to-list 'ayrc/python-language-prerequisites "pylint")
      #+END_SRC

****** [[https://github.com/davidhalter/jedi][Jedi]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref python-jedi
      (add-to-list 'ayrc/python-language-prerequisites "jedi")
      #+END_SRC

****** [[https://github.com/python-rope/rope][Rope]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref python-rope
      (add-to-list 'ayrc/python-language-prerequisites "rope")
      #+END_SRC

****** [[https://github.com/PyCQA/pyflakes][pyflakes]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref python-pyflakes
      (add-to-list 'ayrc/python-language-prerequisites "pyflakes")
      #+END_SRC

****** [[https://github.com/PyCQA/mccabe][mccabe]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref python-mccabe
      (add-to-list 'ayrc/python-language-prerequisites "mccabe")
      #+END_SRC

****** [[https://github.com/PyCQA/pycodestyle][pycodestyle]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref python-pycodestyle
      (add-to-list 'ayrc/python-language-prerequisites "pycodestyle")
      #+END_SRC

****** [[https://github.com/PyCQA/pydocstyle][pydocstyle]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref python-pydocstyle
      (add-to-list 'ayrc/python-language-prerequisites "pydocstyle")
      #+END_SRC

****** [[https://github.com/hhatto/autopep8][Autopep8]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref python-autopep8
      (add-to-list 'ayrc/python-language-prerequisites "autopep8")
      #+END_SRC

****** [[https://github.com/google/yapf][Yapf]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref python-yapf
      (add-to-list 'ayrc/python-language-prerequisites "yapf")
      #+END_SRC

****** [[https://github.com/ipython/ipython][ipython]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref python-ipython
      (add-to-list 'ayrc/python-language-prerequisites "ipython")
      #+END_SRC

**** Env setup modes
      #+BEGIN_SRC emacs-lisp :tangle no :noweb yes :noweb-ref venv-support-packages
        <<pyenv-mode-usepkg>>
        <<pipenv-mode-usepkg>>
        <<poetry-usepkg>>
      #+END_SRC

***** [[https://github.com/pythonic-emacs/pyenv-mode][Pyenv]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref pyenv-mode-usepkg
        (use-package pyenv-mode
            :ensure t
            :defer t
            :after python-mode
            :defines (pyenv-show-active-python-in-modeline)
            :diminish pyenv-mode
            :config
            (setq pyenv-show-active-python-in-modeline t))
      #+END_SRC

***** [[https://github.com/pwalsh/pipenv.el][Pipenv]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref pipenv-mode-usepkg
        (use-package pipenv
            :ensure t
            :defer t
            :after python-mode
            :diminish pipenv-mode
            :init
            (setq pipenv-with-projectile nil))
      #+END_SRC

***** [[https://github.com/galaunay/poetry.el][Poetry]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref poetry-usepkg
        (use-package poetry
            :ensure t
            :defer t
            :after python-mode)
      #+END_SRC

**** [[https://github.com/naiquevin/sphinx-doc.el][Sphinx doc in docstrings]]
     Generate Sphinx friendly docstrings for Python functions

     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref sphinx-doc-usepkg
       (use-package sphinx-doc
           :ensure t
           :defer t
           :after python-mode
           :diminish sphinx-doc-mode
           :commands (sphinx-doc-mode))
     #+END_SRC

**** Hook
     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref python-hook
       (defun ayrc/python-hook ()
           (setq
            lsp-eldoc-render-all            nil
            lsp-eldoc-enable-hover          nil
            lsp-eldoc-enable-signature-help nil
            lsp-eldoc-prefer-signature-help nil

            py-outline-minor-mode-p         nil
            py-auto-fill-mode               nil
            py-eldoc-mode-p                 nil

            python-shell-interpreter        "ipython"
            python-shell-interpreter-args   "-i --simple-prompt")

           (exec-path-from-shell-initialize)

           (display-line-numbers-mode  1)
           (visual-line-mode           1)
           (ws-butler-mode             1)
           (smartparens-mode           1)
           (hs-minor-mode              1)
           (abbrev-mode                1)
           (semantic-mode              1)
           (yas-minor-mode             1)
           (smart-shift-mode           1)
           (hungry-delete-mode         1)

           (highlight-indentation-mode 1)

           (pipenv-mode                1)
           (pyenv-mode                 1)
           (sphinx-doc-mode            1)
           (eldoc-mode                -1)

           (require 'lsp-pyls)
           (require 'dap-python)
           (lsp-deferred))
     #+END_SRC

** [[https://github.com/Wilfred/pip-requirements.el][Pip requirments]]
   Major mode for editing pip requirements files

   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package pip-requirements
         :ensure t
         :mode (("requirements.txt$" . pip-requirements-mode)
                ("requirements.pip$" . pip-requirements-mode))
         :hook (pip-requirements-mode . ayrc/pip-hook)
         :init
         <<pip-requirements-hook>>)
   #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref pip-requirements-hook
      (defun ayrc/pip-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (yas-minor-mode            1))
    #+END_SRC

** TeX/LaTeX
*** Prerequisites
    #+NAME: tex-system-prerequisites
    #+CAPTION: System prerequisites for tex packages

    - [[http://tug.org/texlive/][texlive]] :: A complete TeX distribution
    - [[http://www.nongnu.org/chktex/][chktex]] :: Checks latex source for common mistakes

*** Configuration
     #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
       (use-package tex-mode
           :defines (TeX-auto-save
                     TeX-parse-self
                     TeX-save-query
                     TeX-PDF-mode)
           :mode ("\\.tex\\'" . latex-mode)
           :commands (latex-mode
                      LaTeX-mode
                      plain-tex-mode
                      LaTeX-preview-setup)
           :hook ((latex-mode     . ayrc/tex-hook)
                  (LaTeX-mode     . ayrc/tex-hook)
                  (plain-tex-mode . ayrc/tex-hook))
           :init
           <<auctex-usepkg>>
           <<auctex-company-usepkg>>
           <<latex-math-company-usepkg>>
           <<latex-math-preview-usepkg>>
           <<latex-preview-pane-usepkg>>
           <<latex-pretty-symbols-usepkg>>

           <<tex-hook>>)
     #+END_SRC

**** [[https://www.gnu.org/software/auctex/][AUCTEX]]
     Sophisticated document creation

     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref auctex-usepkg
       (use-package auctex
           :ensure t
           :defer t
           :after tex-mode)
     #+END_SRC

**** Preview
***** [[https://www.emacswiki.org/emacs/LaTeXPreviewPane][Preview pane]]
      Minor mode that enables you to preview your LaTeX files directly in Emacs

      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref latex-preview-pane-usepkg
        (use-package latex-preview-pane
            :ensure t
            :defer t
            :after auctex
            :commands (latex-preview-pane-enable)
            :config (progn
                        (setq pdf-latex-command "xelatex")))
      #+END_SRC

***** Separated preview
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref latex-separated-preview-setup
        (setq-default
         preview-scale 1.4
         preview-scale-function '(lambda ()
                                     (* (/ 10.0 (preview-document-pt))
                                        preview-scale)))
      #+END_SRC

***** [[https://gitlab.com/latex-math-preview/latex-math-preview][Math preview]]
      Previews a mathematical expression pointed by the cursor

      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref latex-math-preview-usepkg
        (use-package latex-math-preview
            :ensure t
            :defer t
            :after (auctex))
      #+END_SRC

**** [[https://bitbucket.org/mortiferus/latex-pretty-symbols.el][Pretty symbols]]
     Makes emacs display unicode characters instead of latex commands

     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref latex-pretty-symbols-usepkg
       (use-package latex-pretty-symbols
           :ensure t
           :defer t
           :after auctex)
     #+END_SRC

**** Autocompletion
***** [[https://github.com/vspinu/company-math][Latex math symbols]]
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref latex-math-company-usepkg
        (use-package company-math
            :ensure t
            :defer t
            :after auctex
            :commands (company-math-symbols-latex
                       company-latex-commands))
      #+END_SRC

***** [[https://github.com/alexeyr/company-auctex][Auctex company]]
      company-mode autocompletion for auctex

      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref auctex-company-usepkg
        (use-package company-auctex
            :ensure t
            :defer t
            :after auctex
            :commands (company-auctex-init))
      #+END_SRC

**** Hook
      #+BEGIN_SRC emacs-lisp :tangle no :noweb yes :noweb-ref tex-hook
        (defun ayrc/tex-hook ()
            (setq TeX-auto-save  t
                  TeX-parse-self t
                  TeX-save-query nil
                  TeX-PDF-mode   t)

            (setq-default TeX-PDF-mode t)
            (setq-default TeX-master nil)
            (setq-default TeX-engine 'xetex)

            <<latex-separated-preview-setup>>

            (display-line-numbers-mode 1)
            (visual-line-mode          1)

            ;; Code listings indented too
            ;; (aggressive-indent-mode    -1)

            (ws-butler-mode            1)
            (smart-shift-mode          1)
            (smartparens-mode          1)
            (abbrev-mode               1)
            (semantic-mode             1)
            (yas-minor-mode            1)

            (hs-minor-mode             1)
            (flycheck-mode             1)
            (tex-fold-mode             1)

            (ayrc/setup-company '(company-math-symbols-latex
                                  company-latex-commands))
            (company-auctex-init)

            (LaTeX-preview-setup))
      #+END_SRC

** Haskell
*** Prerequisites
    :PROPERTIES:
    :CUSTOM_ID: haskell-prerequisites
    :END:

  #+NAME: haskell-prerequisites
  #+CAPTION: Prerequisites for haskell packages

  | Name    | Archlinux | Gentoo                       | Ubuntu  | Optional |
  |---------+-----------+------------------------------+---------+----------|
  | [[https://github.com/DanielG/ghc-mod][ghc-mod]] | ghc-mod   | app-emacs/ghc-mod            | ghc-mod | No       |
  | [[https://github.com/ndmitchell/hlint][hlint]]   | hlint     | dev-haskell/hlint            | hlint   | No       |
  | [[https://github.com/ndmitchell/hoogle][hoogle]]  | hoogle    | dev-haskell/hoogle [haskell] | hoogle  | No       |

*** Packages
    :PROPERTIES:
    :CUSTOM_ID: haskell-packages
    :END:

  #+NAME: haskell-packages
  #+CAPTION: Packages for haskell

  | Package          | Description                                                        |
  |------------------+--------------------------------------------------------------------|
  | [[https://github.com/haskell/haskell-mode][haskell-mode]]     | Emacs mode for editing, debugging and developing Haskell programs. |
  | [[https://github.com/DanielG/ghc-mod][ghc-mod]]          | Haskell completion and keybindings                                 |
  | [[https://github.com/flycheck/flycheck-haskell][flycheck-haskell]] | Flycheck mode for haskell                                          |

*** Haskell
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package haskell-mode
          :ensure t
          :defer t
          :commands haskell-mode
          :mode ("\\.hs\\'" . haskell-mode)

          :init
          (progn
              (setq
               haskell-interactive-popup-errors nil
               haskell-process-suggest-remove-import-lines t
               haskell-process-auto-import-loaded-modules t
               haskell-stylish-on-save t)

              (use-package company-ghci
                  :ensure t
                  :defer t)

              (use-package flycheck-haskell
                  :ensure t
                  :after flycheck
                  :init (add-hook 'flycheck-mode-hook #'flycheck-haskell-setup))

              (use-package intero
                  :defer t
                  :ensure t
                  :init
                  (progn
                      (setq intero-extra-ghci-options '("-fno-defer-type-errors"))))

              (use-package hindent
                  :ensure t
                  :commands (hindent-mode)
                  :bind (:map hindent-mode-map
                              ("C-c R" . hindent-reformat-buffer)))

              (defun haskell-hook ()
                  (semantic-mode)
                  (flycheck-mode)
                  (smart-shift-mode          1)
                  (abbrev-mode               1)
                  (intero-global-mode)
                  (hindent-mode)
                  (ayrc/setup-company '(company-intero
                                        company-ghci
                                        company-yasnippet)))

              (add-hook 'haskell-mode-hook 'haskell-hook)))
    #+END_SRC

** VHDL
   VHDL mode for Emacs

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package vhdl-mode
         :defer t)
   #+END_SRC

** Shell
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package sh-script
         :mode (("\\.ebuild\\'" . shell-script-mode)
                ("\\.sh\\'"     . shell-script-mode))
         :hook (sh-mode . ayrc/shell-hook)
         :init
         <<company-shell-usepkg>>
         <<shell-hook>>

         (setq explicit-shell-file-name "/bin/bash")
         (setq shell-file-name "bash")
         (setenv "SHELL" shell-file-name))
   #+END_SRC

*** [[https://github.com/Alexander-Miller/company-shell][Autocompletion]]
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref company-shell-usepkg
      (use-package company-shell
          :ensure t
          :defer t
          :after sh-script
          :commands (company-shell))
    #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref shell-hook
      (defun ayrc/shell-hook()
          (setq indent-tabs-mode t)

          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (abbrev-mode               1)
          (yas-minor-mode            1)

          (hs-minor-mode             1)
          (flycheck-mode             1)

          (ayrc/setup-company '(company-shell company-yasnippet)))
    #+END_SRC

** Virtualization
*** Containers
**** [[https://github.com/spotify/dockerfile-mode][Docker]]
    #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
      (use-package dockerfile-mode
          :ensure t
          :mode (("Dockerfile'"       . dockerfile-mode)
                 ("\\.Dockerfile\\'"  . dockerfile-mode))
          :hook (dockerfile-mode . ayrc/dockerfile-hook)
          :init
          <<dockerfile-hook>>)
    #+END_SRC

***** Hook
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref dockerfile-hook
        (defun ayrc/dockerfile-hook ()
            (display-line-numbers-mode 1)
            (visual-line-mode          1)
            (ws-butler-mode            1)
            (smart-shift-mode          1)
            (smartparens-mode          1)
            (semantic-mode             1)
            (abbrev-mode               1)
            (yas-minor-mode            1)

            (ayrc/setup-company))
      #+END_SRC

** [[https://github.com/ajc/nginx-mode][Nginx]]
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package nginx-mode
         :ensure t
         :mode (("nginx\.conf\.?.*$" . nginx-mode))
         :hook (nginx-mode . ayrc/nginx-hook)
         :init
         <<company-nginx-usepkg>>
         <<nginx-hook>>)
   #+END_SRC

*** [[https://github.com/stardiviner/company-nginx][Autocompletion]]
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref company-nginx-usepkg
      (use-package company-nginx
          :ensure t
          :defer t
          :after (nginx-mode))
    #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref nginx-hook
      (defun ayrc/nginx-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (abbrev-mode               1)
          (yas-minor-mode            1)

          (ayrc/setup-company)
          (company-nginx-keywords))
    #+END_SRC

** [[https://github.com/holomorph/systemd-mode][Systemd]]
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package systemd
         :ensure t
         :mode (("\\.service\\'"   . systemd-mode)
                ("\\.target\\'"    . systemd-mode)
                ("\\.socket\\'"    . systemd-mode)
                ("\\.service\\'"   . systemd-mode)
                ("\\.timer\\'"     . systemd-mode)
                ("\\.mount\\'"     . systemd-mode)
                ("\\.automount\\'" . systemd-mode)
                ("\\.slice\\'"     . systemd-mode)
                ("\\.path\\'"      . systemd-mode)
                ("\\.netdev\\'"    . systemd-mode)
                ("\\.network\\'"   . systemd-mode)
                ("\\.link\\'"      . systemd-mode))
         :hook (systemd-mode . ayrc/systemd-hook)
         :init
         <<systemd-hook>>)
   #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref systemd-hook
      (defun ayrc/systemd-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (abbrev-mode               1)
          (yas-minor-mode            1)

          (ayrc/setup-company))
    #+END_SRC

** [[https://github.com/emacs-mirror/emacs/blob/master/lisp/textmodes/conf-mode.el][Conf]]
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package conf-mode
         :mode (("\\.toml\\'" . conf-toml-mode)
                ("\\.ini\\'" . conf-windows-mode))
         :hook ((conf-toml-mode-hook    . ayrc/conf-hook)
                (conf-windows-mode-hook . ayrc/conf-hook))
         :init
         <<conf-hook>>)
   #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref conf-hook
      (defun ayrc/conf-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (abbrev-mode               1)
          (yas-minor-mode            1)

          (ayrc/setup-company))
    #+END_SRC

** [[https://github.com/skuro/plantuml-mode][Plantuml]]
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package plantuml-mode
         :ensure t
         :mode (("\\.plantuml\\'" . plantuml-mode))
         :hook (plantuml-mode . ayrc/plantuml-hook)
         :init
         <<flycheck-plantuml-usepkg>>
         <<plantuml-hook>>)
   #+END_SRC

*** [[https://github.com/alexmurray/flycheck-plantuml][Flycheck]]
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref flycheck-plantuml-usepkg
      (use-package flycheck-plantuml
          :ensure t
          :defer t
          :after plantuml-mode
          :commands (flycheck-plantuml-setup))
    #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref plantuml-hook
      (defun ayrc/plantuml-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (abbrev-mode               1)
          (yas-minor-mode            1)

          (ayrc/setup-company)
          (flycheck-plantuml-setup   1)

          (setq plantuml-jar-path "/usr/share/plantuml/lib/plantuml.jar")
          (setq plantuml-output-type "svg"))


    #+END_SRC

** [[https://github.com/preetpalS/emacs-dotenv-mode][Dotenv]]
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package dotenv-mode
         :ensure t
         :mode (("\\.env\\'" . dotenv-mode))
         :hook (dotenv-mode . ayrc/dotenv-hook)
         :init
         <<dotenv-hook>>)
   #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref dotenv-hook
      (defun ayrc/dotenv-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (abbrev-mode               1)
          (yas-minor-mode            1)

          (ayrc/setup-company))
    #+END_SRC

** JSON
    #+NAME: json-system-prerequisites
    #+CAPTION: System prerequisites for json packages
    - [[https://github.com/dmeranda/demjson][demjson]] :: Python module for JSON data encoding, including jsonlint

   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package json-mode
         :mode (("\\.json\\'" . json-mode))
         :hook (json-mode . ayrc/json-hook)
         :bind (:map json-mode-map
                     ("C-c C-r" . json-pretty-print))
         :init
         <<flycheck-demjsonlint-usepkg>>
         <<json-hook>>)
   #+END_SRC

*** Flycheck
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref flycheck-demjsonlint-usepkg
      (use-package flycheck-demjsonlint
          :ensure t
          :defer t
          :after json-mode
          :after (json-mode flycheck))
    #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref json-hook
      (defun ayrc/json-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (abbrev-mode               1)
          (yas-minor-mode            1)

          (ayrc/setup-company)
          (hs-minor-mode             1)

          (setq js-indent-level 4))
    #+END_SRC

** [[https://github.com/yoshiki/yaml-mode][Yaml]]
    #+NAME: yaml-system-prerequisites
    #+CAPTION: System prerequisites for yaml packages
    - [[https://github.com/adrienverge/yamllint][yamllint]] :: A linter for YAML files

   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package yaml-mode
         :ensure t
         :mode (("\\.yml\\'"  . yaml-mode)
                ("\\.yaml\\'" . yaml-mode))
         :bind (:map yaml-mode-map
                     ("C-c f TAB" . indenation-toggle-fold))
         :hook (yaml-mode . ayrc/yaml-hook)
         :init
         <<yaml-hook>>)
   #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref yaml-hook
      (defun ayrc/yaml-hook ()
          (display-line-numbers-mode  1)
          (visual-line-mode           1)
          (ws-butler-mode             1)
          (smart-shift-mode           1)
          (smartparens-mode           1)
          (semantic-mode              1)
          (abbrev-mode                1)
          (yas-minor-mode             1)
          (highlight-indentation-mode 1)

          (outline-minor-mode)
          (setq outline-regexp
                (format
                 "^\\([ ]\\{%d\\}\\)*\\([-] \\)?\\([\"][^\"]*[\"]\\|[a-zA-Z0-9_-]*\\): *\\([>|]\\|&[a-zA-Z0-9_-]*\\)?$"
                 yaml-indent-offset))

          (defun yaml-outline-level ()
              "Return the outline level based on the indentation"
              (s-count-matches (format "[ ]\\{%d\\}" yaml-indent-offset)
                               (match-string 0)))
          (setq outline-level 'yaml-outline-level)

          (flycheck-mode              1)
          (flycheck-yamllint-setup    1)

          (ayrc/setup-company)

          (setq yaml-indent-offset 2))
    #+END_SRC

** XML
   #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
     (use-package nxml-mode
         :commands (nxml-mode)
         :mode ("\\.\\(xml\\|axml\\|xsl|xaml\\)$" . nxml-mode)
         :hook (nxml-mode . ayrc/nxml-hook)
         :init
         <<nxml-hook>>)
   #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref nxml-hook
      (defun ayrc/nxml-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (abbrev-mode               1)
          (yas-minor-mode            1)

          (hs-minor-mode             1)

          (ayrc/setup-company '(company-nxml :with company-yasnippet)))
    #+END_SRC

** [[http://github.com/paradoxxxzero/jinja2-mode][Jinja2]]
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package jinja2-mode
         :ensure t
         :commands (jinja2-mode)
         :mode (("\\.j2\\'" . jinja2-mode))
         :hook (jinja2-mode . ayrc/jinja2-hook)
         :init
         <<jinja2-hook>>)
   #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref jinja2-hook
      (defun ayrc/jinja2-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (abbrev-mode               1)
          (yas-minor-mode            1)

          (ayrc/setup-company))
    #+END_SRC

** RST
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package rst
         :mode (("\\.txt$" . rst-mode)
                ("\\.rst$" . rst-mode))
         :hook (rst-mode . ayrc/rst-hook)
         :init
         <<rst-hook>>)
   #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref rst-hook
      (defun ayrc/rst-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (abbrev-mode               1)
          (yas-minor-mode            1)

          (ayrc/setup-company))
    #+END_SRC

** [[https://jblevins.org/projects/markdown-mode/][Markdown]]
    #+NAME: markdown-system-prerequisites
    #+CAPTION: System prerequisites for markdown packages
    - [[https://github.com/trentm/python-markdown2][python-markdown2]] :: A fast and complete implementation of Markdown

   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package markdown-mode
         :ensure t
         :commands (markdown-mode gfm-mode)
         :mode (("README\\.md\\'" . gfm-mode)
                ("\\.md\\'"       . markdown-mode)
                ("\\.markdown\\'" . markdown-mode))
         :hook (markdown-mode . ayrc/markdown-hook)
         :init
         <<markdown-plus-usepkg>>
         <<markdown-preview-usepkg>>
         <<markdown-hook>>)
   #+END_SRC

*** [[https://github.com/milkypostman/markdown-mode-plus][Markdown+]]
    Additional functions for Emacs [markdown-mode]

    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref markdown-plus-usepkg
      (use-package markdown-mode+
          :ensure t
          :defer t
          :after markdown-mode
          :commands (markdown-cleanup-list-numbers
                     markdown-export-latex
                     markdown-copy-html
                     markdown-copy-rtf))
    #+END_SRC

*** [[https://github.com/ancane/markdown-preview-mode][Preview]]
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref markdown-preview-usepkg
      (use-package markdown-preview-mode
          :ensure t
          :defer t
          :after markdown-mode
          :commands (markdown-preview-mode
                     markdown-preview-open-browser
                     markdown-preview-cleanup)
          :config
          (add-to-list 'markdown-preview-stylesheets
                       "https://raw.githubusercontent.com/richleland/pygments-css/master/emacs.css")
          (add-to-list 'markdown-preview-javascript
                       "http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML")
          (add-to-list 'markdown-preview-javascript
                       '("http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML" . async)))
    #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref markdown-hook
      (defun ayrc/markdown-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (abbrev-mode               1)
          (yas-minor-mode            1)

          (ayrc/setup-company)

          (setq markdown-command "markdown2"))
    #+END_SRC

** Make
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package make-mode
         :mode (("[Mm]akefile\\'" . makefile-gmake-mode))
         :hook ((makefile-mode          . ayrc/make-hook)
                (makefile-gmake-mode    . ayrc/make-hook)
                (makefile-imake-mode    . ayrc/make-hook)
                (makefile-bsdmake-mode  . ayrc/make-hook)
                (makefile-automake-mode . ayrc/make-hook)
                (makefile-mode          . ayrc/make-hook))
         :init
         <<make-hook>>)
   #+END_SRC

*** [[https://github.com/nverno/company-makefile][Company]]                                                                               :disabled:
    Package is not ready yet.

    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref make-company-completion
      (use-package company-makefile
          :ensure t
          :commands (company-makefile-init company-makefile-capf))
    #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref make-hook
      (defun ayrc/make-hook ()
          (setq indent-tabs-mode t)

          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (abbrev-mode               1)
          (semantic-mode             1)
          (yas-minor-mode            1)

          (ayrc/setup-company '(company-capf :with company-yasnippet)))
    #+END_SRC

** [[https://gitlab.kitware.com/cmake/cmake/blob/master/Auxiliary/cmake-mode.el][CMake]]
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package cmake-mode
         :ensure t
         :mode (("/CMakeLists\\.txt\\'" . cmake-mode)
                ("\\.cmake\\'" . cmake-mode))
         :hook (cmake-mode . ayrc/cmake-hook)
         :init
         <<cmake-font-lock-usepkg>>
         <<cmake-hook>>)
   #+END_SRC

*** [[https://github.com/Lindydancer/cmake-font-lock][CMake Font-lock]]
    Emacs Font-lock rules for CMake

    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref cmake-font-lock-usepkg
      (use-package cmake-font-lock
          :ensure t
          :defer t
          :after cmake-mode
          :commands (cmake-font-lock-activate))
    #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref cmake-hook
      (defun ayrc/cmake-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (abbrev-mode               1)
          (yas-minor-mode            1)

          (ayrc/setup-company '(company-cmake :with company-yasnippet))

          (hs-minor-mode             1)
          (flycheck-mode             1)
          (cmake-font-lock-activate)

          (setq cmake-tab-width 4))
    #+END_SRC

** Bitbake
   #+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
     (use-package bitbake
         :ensure t
         :mode (("\\.bb$" . bitbake-mode)
                ("\\.inc$" . bitbake-mode)
                ("\\.bbappend$" . bitbake-mode)
                ("\\.bbclass$" . bitbake-mode))
         :hook (bitbake-mode . ayrc/bitbake-hook)
         :init
         <<bitbake-hook>>)
   #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref bitbake-hook
      (defun ayrc/bitbake-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (abbrev-mode               1)
          (yas-minor-mode            1)

          (ayrc/setup-company '(company-cmake :with company-yasnippet))

          (hs-minor-mode             1)
          (flycheck-mode             1))
    #+END_SRC
