#+TITLE: Core
#+OPTIONS: toc:nil num:nil ^:nil

Core settings for editor

* Configuration
** Reload configuration
   #+BEGIN_SRC emacs-lisp
     (defun ayrc/reload-configuration ()
         "Reload configuration starting from ~/.emacs.d/init.el"
         (interactive)
         (load-file (ayrc/expand-config-path "./init.el")))

     (defun ayrc/reload-current-config ()
         (interactive)
         (let ((filename (buffer-file-name)))
             (if (string-equal (file-name-extension filename) "org")
                     (org-babel-load-file filename)
                 (load-file filename))))
   #+END_SRC

** Bookmarks
   #+BEGIN_SRC emacs-lisp
     (setq bookmark-save-flag 1)
   #+END_SRC

** [[https://github.com/10sr/switch-buffer-functions-el][Hook Run When Current Buffer Changed]]
   #+BEGIN_SRC emacs-lisp
     (use-package switch-buffer-functions
         :ensure t)
   #+END_SRC

** Backups in /tmp
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist
           `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
           `((".*" ,temporary-file-directory t)))
   #+END_SRC

** [[https://www.emacswiki.org/emacs/Desktop][Session saving]]
   Save partial status of Emacs when killed

   #+BEGIN_SRC emacs-lisp
     (use-package desktop
         :config
         (progn
             (setq desktop-restore-frames nil)

             ;; use only one desktop
             (setq desktop-path (list user-emacs-directory))
             (setq desktop-dirname user-emacs-directory)
             (setq desktop-base-file-name "emacs-desktop")

             (defun ayrc/remove-stale-desktop-lock-file (dir)
                 (let ((pid (desktop-owner dir)))
                     (when pid
                         (let ((infile nil)
                               (destination nil)
                               (display nil))
                             (unless (= (call-process "ps" infile destination display "-p"
                                                      (number-to-string pid)) 0)
                                 (let ((lock-fn (desktop-full-lock-name dir)))
                                     (delete-file lock-fn)))))))

             ;; remove desktop after it's been read
             (add-hook 'desktop-after-read-hook
                       #'(lambda ()
                             ;; desktop-remove clears desktop-dirname
                             (setq desktop-dirname-tmp desktop-dirname)
                             (desktop-remove)
                             (setq desktop-dirname desktop-dirname-tmp)))

             (defun ayrc/path-to-saved-session ()
                 (file-exists-p
                  (concat desktop-dirname "/" desktop-base-file-name)))

             ;; use session-restore to restore the desktop manually
             (defun ayrc/session-restore ()
                 "Restore a saved emacs session."
                 (interactive)
                 (ayrc/remove-stale-desktop-lock-file desktop-dirname)
                 (if (ayrc/path-to-saved-session)
                         (desktop-read)
                     (message "No desktop found.")))

             ;; use session-save to save the desktop manually
             (defun ayrc/session-save ()
                 "Save an emacs session."
                 (interactive)
                 (if (ayrc/path-to-saved-session)
                         (if (y-or-n-p "Overwrite existing desktop? ")
                                 (desktop-save-in-desktop-dir)
                             (message "Session not saved."))
                     (desktop-save-in-desktop-dir)))))
    #+END_SRC

** [[https://github.com/purcell/exec-path-from-shell][Use user ${PATH} from shell]]
   Make Emacs use the $PATH set up by the user's shell

   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
         :ensure t
         :config
         (progn
             (setq exec-path-from-shell-check-startup-files nil)

             (when (memq window-system '(mac ns x))
                 (exec-path-from-shell-initialize)
                 (exec-path-from-shell-copy-env "PYENV_ROOT"))))
   #+END_SRC
