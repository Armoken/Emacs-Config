#+TITLE: Development
#+OPTIONS: toc:nil num:nil ^:nil

Common settings for almost all development modes

* Prerequisites
** System
   :PROPERTIES:
   :CUSTOM_ID: development-system-prerequisites
   :END:

   #+NAME: development-system-prerequisites
   #+CAPTION: System prerequisites for development

   - [[https://www.gnu.org/software/global/][GNU Global]] :: intall it and put [[file:~/.emacs.d/other/etc/gtags.conf][gtags configuration]] into HOME/.globalrc
                     or gtags.conf into project root
* Packages
  :PROPERTIES:
  :CUSTOM_ID: development-packages
  :END:

  #+NAME: development-packages
  #+CAPTION: Packages for development
  - [[https://github.com/bbatsov/projectile][projectile]] :: Project managment
  - [[https://github.com/flycheck/flycheck][flycheck]] :: Modern on-the-fly syntax checking extension
  - [[https://github.com/flycheck/flycheck-popup-tip][flycheck-popup-tip]] :: Display Flycheck error messages using popup.el
  - [[http://cedet.sourceforge.net/semantic.shtml][semantic]] :: Languages parser for static analysis and navigation
  - [[https://github.com/company-mode/company-mode][company]] :: Modular in-buffer completion framework
  - [[https://github.com/company-mode/company-statistics][company-quickhelp]] :: Sort completion candidates by previous completion choices
  - [[https://github.com/PythonNut/company-flx][company-flx]] :: Flx fuzzy matching for company
  - [[https://github.com/company-mode/company-statistics][company-statistics]] :: Sort completion candidates by previous completion choices
  - [[https://github.com/magit/magit][magit]] :: Git support
  - [[https://melpa.org/#/dsvn][dsvn]] :: Subversion interface
  - [[https://www.emacswiki.org/emacs/HideShow][hideshow]] :: It hides and shows blocks of text
  - [[https://github.com/joaotavora/yasnippet][yasnippet]] :: Template system
  - [[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent]] :: Minor mode that keeps your code always indented
  - [[https://github.com/antonj/Highlight-Indentation-for-Emacs][highlight-indentation]] :: Modes to highlight indentation guides
  - [[https://github.com/editorconfig/editorconfig-emacs][editorconfig]] :: EditorConfig plugin
  - [[https://github.com/magnars/expand-region.el][expand-region]] :: Expand current region using lexems' semantic
  - [[https://www.emacswiki.org/emacs/ElDoc][eldoc]] :: which shows you, in the echo area, the argument list of the
              function call you are currently writing
  - [[https://github.com/leoliu/ggtags][ggtags]] :: Frontend to GNU Global source code tagging system
  - [[https://github.com/syohex/emacs-helm-gtags][emacs-helm-gtags]] :: GNU GLOBAL helm interface
  - [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] :: Client/library for the Language Server Protocol
  - [[https://github.com/tigersoldier/company-lsp][company-lsp]] :: Company completion backend for lsp-mode
  - [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]] :: A generic framework and new commands to find and move to
             definitions of functions
  - [[https://github.com/brotzeit/helm-xref][helm-xref]] :: Helm interface for xref results
  - [[https://github.com/realgud/realgud][realgud]] :: The Grand "Cathedral" Debugger rewrite
* Configuration
** Project managment
   #+BEGIN_SRC emacs-lisp :noweb tangle
     (use-package projectile
         :ensure t
         :bind
         (:map projectile-mode-map
               ("C-x p o" . projectile-switch-open-project)
               ("C-x p s" . projectile-switch-project)
               ("<f9>"    . projectile-compile-project)
               ("C-c p i" . projectile-invalidate-cache)
               ("C-c p z" . projectile-cache-current-file)
               ("C-c p b" . helm-projectile-switch-to-buffer))
         :init
         (progn
             <<helm-projectile-use-package>>
             (projectile-mode))
         :config
         (progn
             (setq projectile-completion-system 'helm)
             (setq projectile-switch-project-action 'helm-projectile)
             (setq-default projectile-mode-line
                           '(:eval (format "[P<%s>]" (projectile-project-name))))

             (setq projectile-project-root-files-top-down-recurring
                   (append
                    '("compile_commands.json"
                      ".cquery"
                      ".ccls")
                    projectile-project-root-files-top-down-recurring))))
   #+END_SRC

*** Helm
     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref helm-projectile-use-package
       (use-package helm-projectile
           :ensure t
           :after projectile
           :bind (:map projectile-mode-map
                       ("C-c p s" . ayrc/helm-projectile-grep-or-rg)
                       ("C-c p h" . helm-projectile)
                       ("C-c p p" . helm-projectile-switch-project)
                       ("C-c p f" . helm-projectile-find-file)
                       ("C-c p F" . helm-projectile-find-file-in-known-projects)
                       ("C-c p g" . helm-projectile-find-file-dwim)
                       ("C-c p d" . helm-projectile-find-dir)
                       ("C-c p e" . helm-projectile-recentf)
                       ("C-c p a" . helm-projectile-find-other-file))
           :config
           (progn
               (defun ayrc/helm-projectile-grep-or-rg ()
                   "Uses helm-projectile-grep, if ag doesn't present"
                   (interactive)
                   (if (executable-find "rg") (helm-projectile-rg)
                       (helm-projectile-grep)))))

     #+END_SRC
** Static code analysis
*** Flymake
    #+BEGIN_SRC emacs-lisp :noweb tangle
      (use-package flymake
          :diminish flymake-mode "[FM]"
          :commands (flymake-mode)
          :init
          (progn
              <<helm-flymake-use-package>>))
    #+END_SRC

**** Helm
     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref helm-flymake-use-package
       (use-package helm-flymake
           :ensure t
           :bind (:map flymake-mode-map
                       ("C-c h f" . helm-flymake))
           :commands (helm-flymake))
     #+END_SRC

*** Flycheck
    #+BEGIN_SRC emacs-lisp :noweb tangle
      (use-package flycheck
          :ensure t
          :diminish flycheck-mode "[FC]"
          :commands (flycheck-mode)
          :hook (flycheck-mode . ayrc/flycheck-hook)
          :init
          (progn
              <<helm-flycheck-use-package>>)
          :preface
          (progn
              <<flycheck-hook>>))
    #+END_SRC

**** Helm
     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref helm-flycheck-use-package
       (use-package helm-flycheck
           :ensure t
           :after flycheck
           :bind (:map flycheck-mode-map
                       ("C-c h f" . helm-flycheck))
           :commands (helm-flycheck))
     #+END_SRC

**** Hook
     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref flycheck-hook
       (defun ayrc/flycheck-hook ()
           (flymake-mode -1)

           (setq flycheck-standard-error-navigation nil)
           (setq flycheck-idle-change-delay 0)
           (setq flycheck-check-syntax-automatically '(save mode-enabled)))
     #+END_SRC

** Autocompletion
*** Semantic
    #+BEGIN_SRC emacs-lisp
      (use-package semantic
          :diminish semantic-mode "[S]"
          :commands (semantic-mode))
    #+END_SRC

*** Company
    #+BEGIN_SRC emacs-lisp :noweb tangle
      (use-package company
          :ensure t
          :diminish company-mode
          :bind
          (:map company-active-map
                ("<tab>" . company-complete-selection))
          :hook (company-mode . ayrc/company-hook)
          :init
          (progn
              <<company-box-use-package>>
              <<company-flx-use-package>>
              <<company-quickhelp-use-package>>)
          :preface
          (progn
              <<company-hook>>))
    #+END_SRC

**** Documentation
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref company-quickhelp-use-package
      (use-package company-quickhelp
          :ensure t
          :after company
          :hook (company-mode . company-quickhelp-mode)
          :bind (:map company-active-map
                      ("M-h" . #'company-quickhelp-manual-begin)))
    #+END_SRC

**** Fuzzy matching
     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref company-flx-use-package
       (use-package company-flx
           :ensure t
           :after company
           :hook (company-mode . company-flx-mode))
     #+END_SRC

**** Icons
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref company-box-use-package
      (use-package company-box
          :ensure t
          :disabled
          :after company
          :hook (company-mode . company-box-mode)
          :config
          (progn
              (setq company-box-icons-alist company-box-icons-all-the-icons)))
     #+END_SRC

**** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref company-hook
      (defun ayrc/company-hook ()
          (setq company-tooltip-align-annotations t

                ;; Easy navigation to candidates with M-<n>
                company-idle-delay                0.0

                company-show-numbers              t
                company-minimum-prefix-length     1)

          (setq company-backends
                ;; files & directory && keywords
                '((company-files        company-keywords)
                  ;; abbreviations && dynamic abbreviat
                  (company-abbrev     company-dabbrev))))
    #+END_SRC

** Folding
   #+BEGIN_SRC emacs-lisp
     (use-package hideshow
         :diminish hs-minor-mode
         :commands (hs-minor-mode)
         :bind
         (:map hs-minor-mode-map
               ("C-c f TAB" . hs-toggle-hiding)
               ("C-c f h"   . hs-hide-all)
               ("C-c f s"   . hs-show-all))
         :init
         (progn
             ;; For yaml mode and others
             (defun ayrc/indenation-toggle-fold ()
                 "Toggle fold all lines larger than indentation on current line"
                 (interactive)
                 (let ((col 1))
                     (save-excursion
                         (back-to-indentation)
                         (setq col (+ 1 (current-column)))
                         (set-selective-display
                          (if selective-display nil (or col 1)))))))
         :config
         (progn
             (add-to-list 'hs-special-modes-alist
                          (list 'nxml-mode
                                "<!--\\|<[^/>]*[^/]>"
                                "-->\\|</[^/>]*[^/]>"
                                "<!--"
                                'nxml-forward-element
                                nil))))
   #+END_SRC
** Snippets
   #+BEGIN_SRC emacs-lisp :noweb tangle
     (use-package yasnippet
         :ensure t
         :diminish yas-minor-mode
         :init
         (progn
             <<snippets-collection>>)
         :config
         (progn
             (setq yas-snippet-dirs
                   (list
                    yasnippet-snippets-dir
                    (expand-config-path "./personal-snippets") ;; Personal snippets
                    ))
             (yas-reload-all)))
   #+END_SRC

*** Ready snippets collection
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref snippets-collection
      (use-package yasnippet-snippets
          :ensure t
          :after yasnippet)
    #+END_SRC

** Indents
   #+BEGIN_SRC emacs-lisp
     (setq-default tab-width 4)
     (setq-default pc-basic-offset 4)
     (setq-default standart-indent 4)
     (setq-default indent-tabs-mode nil)
   #+END_SRC

*** Aggressive Indent
    Emacs minor mode that keeps your code always indented.
    More reliable than electric-indent-mode.

    #+BEGIN_SRC emacs-lisp
      (use-package aggressive-indent
          :ensure t
          :commands (aggressive-indent-mode)
          :diminish aggressive-indent-mode "[a]"
          :config
          (progn
              (electric-indent-mode -1)))
    #+END_SRC
** Highlighting
*** Syntax
    #+BEGIN_SRC emacs-lisp
      (use-package font-lock
        :config
        (progn
          (setq font-lock-maximum-decoration t)))
    #+END_SRC

*** Indentation
    #+BEGIN_SRC emacs-lisp
      (use-package highlight-indentation
        :ensure t
        :diminish "[hi]"
        :commands (highlight-indentation-mode))
    #+END_SRC

** EditorConfig
   #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :ensure t
       :diminish "[ec]"
       :config
       (progn
         (editorconfig-mode)))
   #+END_SRC

** Expand region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :commands (er/expand-region)
       :bind ("C-=" . er/expand-region))
   #+END_SRC

** Eldoc
   #+BEGIN_SRC emacs-lisp
     (use-package eldoc
         :diminish eldoc-mode
         :init
         (progn
             (global-eldoc-mode -1)))
   #+END_SRC

** GTags
   #+BEGIN_SRC emacs-lisp :noweb tangle
     (use-package ggtags
         :ensure t
         :diminish ggtags-mode "[G]"
         :commands (ggtags-mode)
         :init
         (progn
             <<helm-gtags-use-package>>)
         :config
         (progn
             (setq ggtags-update-on-save nil)
             (setq ggtags-use-idutils t)
             (setq ggtags-sort-by-nearness t)
             (unbind-key "M-<" ggtags-mode-map)
             (unbind-key "M->" ggtags-mode-map)))
   #+END_SRC

*** Helm
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref helm-gtags-use-package
      (use-package helm-gtags
          :ensure t
          :after ggtags
          :commands (helm-gtags-select helm-gtags-find-tag)
          :config
          (progn
              (setq helm-gtags-fuzzy-match t)
              (setq helm-gtags-preselect t)
              (setq helm-gtags-prefix-key "\C-cg")
              (setq helm-gtags-path-style 'relative)

              (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
              (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)))
    #+END_SRC

** LSP
   #+BEGIN_SRC emacs-lisp :noweb tangle
     (use-package lsp-mode
         :ensure t
         :diminish lsp-mode "[L]"
         :commands (lsp-mode lsp-deffered lsp-rename)
         :hook (lsp-mode . ayrc/lsp-hook)
         :init
         (progn
             <<company-lsp-use-package>>
             <<lsp-ui-use-package>>
             <<helm-lsp-use-package>>)
         :config
         (progn
             <<redefined--lsp-auto-configure>>

             <<lsp-hook>>))
   #+END_SRC

*** Redefined lsp--auto-configure
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref redefined--lsp-auto-configure
      (defun lsp--auto-configure ()
          "Autoconfigure `lsp-ui', `company-lsp' if they are installed."

          (with-no-warnings
              (when (functionp 'lsp-ui-mode)
                  (lsp-ui-mode))

              (cond
               ((eq :none lsp-prefer-flymake))
               ((and (not (version< emacs-version "26.1")) lsp-prefer-flymake)
                (lsp--flymake-setup))
               ((and (functionp 'lsp-ui-mode) (featurep 'flycheck))
                (require 'lsp-ui-flycheck)
                (lsp-ui-flycheck-enable t)
                (flycheck-mode 1)))

              (when (functionp 'company-lsp)
                  (company-mode 1)
                  (add-to-list 'company-backends
                               '(company-lsp :with company-yasnippet))

                  ;; make sure that company-capf is disabled since it is not indented to be
                  ;; used in combination with lsp-mode (see #884)
                  (setq-local company-backends (remove 'company-capf company-backends))

                  (when (functionp 'yas-minor-mode)
                      (yas-minor-mode t)))))
    #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref lsp-hook
      (defun ayrc/lsp-hook ()
          (setq lsp-prefer-flymake                         nil
                lsp-enable-folding                         t
                lsp-enable-snippet                         t
                lsp-vetur-completion-use-scaffold-snippets t
                lsp-enable-file-watchers                   nil)

          (ayrc/local-set-keys '(("C-c r"   . lsp-rename)
                                 ("C-c C-r" . lsp-format-region)
                                 ("M-."     . lsp-ui-peek-find-definitions)
                                 ("M-,"     . xref-pop-marker-stack)
                                 ("M-?"     . lsp-ui-peek-find-references)
                                 ("C-M-."   . xref-find-apropos)))

          (flycheck-mode 1)

          (company-mode  1)
          (make-local-variable 'company-backends)

          (dap-mode      1))
    #+END_SRC

*** Helm
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref helm-lsp-use-package
      (use-package helm-lsp
          :ensure t
          :bind
          ((:map lsp-mode-map
                 ("C-c h w" . helm-lsp-workspace-symbol)))
          :commands (helm-lsp-workspace-symbol))
    #+END_SRC

*** Company
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref company-lsp-use-package
      (use-package company-lsp
          :ensure t
          :config
          (progn
              (setq
               company-lsp-enable-snippet      t
               company-transformers            nil
               company-lsp-async               t
               company-lsp-cache-candidates    nil

               company-lsp-enable-recompletion t)))
    #+END_SRC

*** UI modules
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref lsp-ui-use-package
      (use-package lsp-ui
          :ensure t
          :hook (lsp-mode . lsp-ui-mode)
          :config
          (progn
              (setq lsp-ui-peek-enable           nil
                    lsp-ui-sideline-enable       nil
                    lsp-ui-imenu-enable          t
                    lsp-ui-doc-enable            t
                    lsp-ui-flycheck-enable       t
                    lsp-ui-doc-include-signature nil
                    lsp-ui-sideline-show-symbol  nil)))
    #+END_SRC

** Xref
   #+BEGIN_SRC emacs-lisp :noweb tangle
     (use-package xref
         :init
         (progn
             <<helm-xref-use-package>>))
   #+END_SRC

*** Helm
     #+BEGIN_SRC emacs-lisp  :tangle no :noweb-ref helm-xref-use-package
       (use-package helm-xref
           :ensure t
           :commands (helm-xref-show-xrefs)
           :config
           (progn
               (setq xref-show-xrefs-function 'helm-xref-show-xrefs)))
     #+END_SRC

** Debugging
*** GUD
    #+BEGIN_SRC emacs-lisp
      (use-package realgud
          :ensure t)
    #+END_SRC

*** DAP
    #+BEGIN_SRC emacs-lisp
      (use-package dap-mode
          :ensure t
          :diminish dap-mode "[D]"
          :hook (dap-mode . ayrc/dap-hook)
          :config
          (progn
              (defun ayrc/dap-hook ()
                  (setq dap-lldb-debug-program '("/usr/bin/lldb-vscode"))
                  (add-hook 'dap-stopped-hook
                            (lambda (arg) (call-interactively #'dap-hydra)))

                  ;; use tooltips for mouse hover
                  ;; if it is not enabled `dap-mode' will use the minibuffer.
                  (tooltip-mode 1)

                  (dap-ui-mode 1)

                  ;; enables mouse hover support
                  (dap-tooltip-mode 1))))

    #+END_SRC

** Compilation
*** Press to compile                                                :global_hotkeys:
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f9>") 'compile)
   #+END_SRC

*** Errors switching                                                :global_hotkeys:
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f7>") 'next-error)
     (global-set-key (kbd "<f8>") 'previous-error)
   #+END_SRC
