#+TITLE: Development
#+OPTIONS: toc:nil num:nil ^:nil

Common settings for almost all development modes

* Prerequisites
** System
   :PROPERTIES:
   :CUSTOM_ID: development-system-prerequisites
   :END:

   #+NAME: development-system-prerequisites
   #+CAPTION: System prerequisites for development

   - [[https://www.gnu.org/software/global/][GNU Global]] :: intall it and put [[file:~/.emacs.d/other/etc/gtags.conf][gtags configuration]] into HOME/.globalrc
                     or gtags.conf into project root
* Packages
  :PROPERTIES:
  :CUSTOM_ID: development-packages
  :END:

  #+NAME: development-packages
  #+CAPTION: Packages for development
  - [[https://github.com/bbatsov/projectile][projectile]] :: Project managment
  - [[https://github.com/flycheck/flycheck][flycheck]] :: Modern on-the-fly syntax checking extension
  - [[https://github.com/flycheck/flycheck-popup-tip][flycheck-popup-tip]] :: Display Flycheck error messages using popup.el
  - [[http://cedet.sourceforge.net/semantic.shtml][semantic]] :: Languages parser for static analysis and navigation
  - [[https://github.com/company-mode/company-mode][company]] :: Modular in-buffer completion framework
  - [[https://github.com/company-mode/company-statistics][company-quickhelp]] :: Sort completion candidates by previous completion choices
  - [[https://github.com/PythonNut/company-flx][company-flx]] :: Flx fuzzy matching for company
  - [[https://github.com/company-mode/company-statistics][company-statistics]] :: Sort completion candidates by previous completion choices
  - [[https://github.com/magit/magit][magit]] :: Git support
  - [[https://melpa.org/#/dsvn][dsvn]] :: Subversion interface
  - [[https://www.emacswiki.org/emacs/HideShow][hideshow]] :: It hides and shows blocks of text
  - [[https://github.com/joaotavora/yasnippet][yasnippet]] :: Template system
  - [[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent]] :: Minor mode that keeps your code always indented
  - [[https://github.com/antonj/Highlight-Indentation-for-Emacs][highlight-indentation]] :: Modes to highlight indentation guides
  - [[https://github.com/editorconfig/editorconfig-emacs][editorconfig]] :: EditorConfig plugin
  - [[https://github.com/magnars/expand-region.el][expand-region]] :: Expand current region using lexems' semantic
  - [[https://www.emacswiki.org/emacs/ElDoc][eldoc]] :: which shows you, in the echo area, the argument list of the
              function call you are currently writing
  - [[https://github.com/leoliu/ggtags][ggtags]] :: Frontend to GNU Global source code tagging system
  - [[https://github.com/syohex/emacs-helm-gtags][emacs-helm-gtags]] :: GNU GLOBAL helm interface
  - [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] :: Client/library for the Language Server Protocol
  - [[https://github.com/tigersoldier/company-lsp][company-lsp]] :: Company completion backend for lsp-mode
  - [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]] :: A generic framework and new commands to find and move to
             definitions of functions
  - [[https://github.com/brotzeit/helm-xref][helm-xref]] :: Helm interface for xref results
  - [[https://github.com/realgud/realgud][realgud]] :: The Grand "Cathedral" Debugger rewrite
* Configuration
** Project managment
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
         :ensure t
         :commands (projectile-global-mode
                    projectile-ignored-projects
                    projectile-compile-project)
         :bind
         (:map projectile-mode-map
               ("C-x p o" . projectile-switch-open-project)
               ("C-x p s" . projectile-switch-project)
               ("<f9>"    . projectile-compile-project)
               ("C-c p h" . helm-projectile)
               ("C-c p p" . helm-projectile-switch-project)
               ("C-c p f" . helm-projectile-find-file)
               ("C-c p F" . helm-projectile-find-file-in-known-projects)
               ("C-c p g" . helm-projectile-find-file-dwim)
               ("C-c p d" . helm-projectile-find-dir)
               ("C-c p e" . helm-projectile-recentf)
               ("C-c p a" . helm-projectile-find-other-file)
               ("C-c p i" . projectile-invalidate-cache)
               ("C-c p z" . projectile-cache-current-file)
               ("C-c p b" . helm-projectile-switch-to-buffer)
               ("C-c p s" . helm-projectile-grep-or-ag))
         :init
         (progn
             (use-package helm-projectile
                 :ensure t)
             (defun helm-projectile-grep-or-ag ()
                 "Uses helm-projectile-grep, if ag doesn't present"
                 (interactive)
                 (if (executable-find "ag") (helm-projectile-ag)
                     (helm-projectile-grep)))
             )
         :config
         (progn
             (projectile-global-mode)
             (setq projectile-completion-system 'helm)
             (setq projectile-switch-project-action 'helm-projectile)
             (setq-default projectile-mode-line
                           '(:eval (format "[P<%s>]" (projectile-project-name))))

             (setq projectile-project-root-files-top-down-recurring
                   (append
                    '("compile_commands.json"
                      ".cquery"
                      ".ccls")
                    projectile-project-root-files-top-down-recurring))))
   #+END_SRC

** Static code analysis
   #+BEGIN_SRC emacs-lisp :noweb tangle
     (use-package flycheck
         :ensure t
         :diminish flycheck-mode "[F]"
         :commands (flycheck-mode)
         :init
         (progn
             <<flycheck-popup-use-package>>
             (add-hook 'flycheck-mode-hook 'flycheck-popup-tip-mode)

             <<helm-flycheck-use-package>>)
         :config
         (progn
             (setq flycheck-standard-error-navigation nil)
             (setq flycheck-idle-change-delay 0)
             (setq flycheck-check-syntax-automatically '(save mode-enabled))))
   #+END_SRC
*** Popup
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref flycheck-popup-use-package
      (use-package flycheck-popup-tip
          :ensure t
          :commands (flycheck-popup-tip-mode))
    #+END_SRC
*** Helm
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref helm-flycheck-use-package
      (use-package helm-flycheck
          :ensure t
          :bind (("C-c h f" . helm-flycheck)))
    #+END_SRC
** Autocompletion
*** Semantic
    #+BEGIN_SRC emacs-lisp
      (use-package semantic
          :diminish semantic-mode "[S]"
          :commands (semantic-mode))
    #+END_SRC
*** Company
    #+BEGIN_SRC emacs-lisp :noweb tangle
      (use-package company
          :ensure t
          :diminish company-mode
          :bind
          (:map company-active-map
                ("TAB" . company-complete-selection))
          :init
          (progn
              <<company-flx-use-package>>
              <<company-quickhelp-use-package>>
              <<company-statistics-use-package>>

              (global-company-mode))
          :config
          (progn
              (setq company-tooltip-align-annotations t

                    ;; Easy navigation to candidates with M-<n>
                    company-idle-delay                0.0

                    company-show-numbers              t
                    company-minimum-prefix-length     1)

              (setq company-backends
                    '((company-files        ;; files & directory
                       company-keywords)    ;; keywords

                      (company-abbrev       ;; abbreviations
                       company-dabbrev      ;; dynamic abbreviations
                       company-yasnippet))) ;; snippets

              (company-flx-mode)
              (company-quickhelp-mode)
              (company-statistics-mode)))
    #+END_SRC
**** Documentation
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref company-quickhelp-use-package
      (use-package company-quickhelp
          :ensure t
          :commands (company-quickhelp-mode)
          :config
          (progn
              (define-key company-active-map (kbd "M-h")
                  #'company-quickhelp-manual-begin)))
    #+END_SRC
**** Fuzzy matching
     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref company-flx-use-package
       (use-package company-flx
           :commands (company-flx-mode)
           :ensure t)
     #+END_SRC
**** Sort candidates by previous completion choices
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref company-statistics-use-package
       (use-package company-statistics
           :ensure t
           :commands (company-statistics-mode))
     #+END_SRC
** VCS
*** Git
     #+BEGIN_SRC emacs-lisp
       (use-package magit
         :ensure t

         :commands magit-get-top-dir
         :bind (("C-x g" . magit-status))

         :init
         (progn
           (delete 'Git vc-handled-backends)
           ;; Close popup when commiting - this stops the commit window
           ;; hanging around
           ;; From: http://git.io/rPBE0Q
           (defadvice git-commit-commit (after delete-window activate)
             (delete-window))

           (defadvice git-commit-abort (after delete-window activate)
             (delete-window))

           ;; these two force a new line to be inserted into a commit window,
           ;; which stops the invalid style showing up.
           ;; From: http://git.io/rPBE0Q
           (defun magit-commit-mode-init ()
             (when (looking-at "\n")
               (open-line 1)))

           (add-hook 'git-commit-mode-hook 'magit-commit-mode-init))

         :config
         (progn
           ;; restore previously hidden windows
           (defadvice magit-quit-window (around magit-restore-screen activate)
             (let ((current-mode major-mode))
               ad-do-it
               (when (eq 'magit-status-mode current-mode)
                 (jump-to-register :magit-fullscreen))))

           ;; magit settings
           (setq
            magit-default-tracking-name-function 'magit-default-tracking-name-branch-only
            ;; open magit status in same window as current buffer
            magit-status-buffer-switch-function 'switch-to-buffer
            ;; highlight word/letter changes in hunk diffs
            magit-diff-refine-hunk t
            ;; ask me to save buffers
            magit-save-some-buffers t
            ;; ask me if I want a tracking upstream
            magit-set-upstream-on-push 'askifnotset
            )))
	  #+END_SRC
*** Subversion
    #+BEGIN_SRC emacs-lisp
      (use-package dsvn
          :ensure t
          :commands (svn-status svn-log svn-update))
    #+END_SRC
** Folding
   #+BEGIN_SRC emacs-lisp
     (use-package hideshow
         :diminish hs-minor-mode
         :commands (hs-minor-mode)
         :bind
         (:map hs-minor-mode-map
               ("C-c f TAB" . hs-toggle-hiding)
               ("C-c f h"   . hs-hide-all)
               ("C-c f s"   . hs-show-all))
         :init
         (progn
             ;; For yaml mode and others
             (defun indenation-toggle-fold ()
                 "Toggle fold all lines larger than indentation on current line"
                 (interactive)
                 (let ((col 1))
                     (save-excursion
                         (back-to-indentation)
                         (setq col (+ 1 (current-column)))
                         (set-selective-display
                          (if selective-display nil (or col 1)))))))
         :config
         (progn
             (add-to-list 'hs-special-modes-alist
                          (list 'nxml-mode
                                "<!--\\|<[^/>]*[^/]>"
                                "-->\\|</[^/>]*[^/]>"
                                "<!--"
                                'nxml-forward-element
                                nil))))
   #+END_SRC
** Snippets
   #+BEGIN_SRC emacs-lisp :noweb tangle
     (use-package yasnippet
         :ensure t
         :diminish yas-minor-mode
         :init
         (progn
             <<snippets-collection>>

             (yas-global-mode))
         :config
         (progn
             (setq yas-snippet-dirs
                   (list
                    (expand-config-path "./snippets/personal") ;; Personal snippets
                    ))
             (yas-reload-all)))
   #+END_SRC

*** Ready snippets collection
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref snippets-collection
      (use-package yasnippet-snippets
          :ensure t)
    #+END_SRC

** Indents
   #+BEGIN_SRC emacs-lisp
     (setq-default tab-width 4)
     (setq-default pc-basic-offset 4)
     (setq-default standart-indent 4)
     (setq-default indent-tabs-mode nil)
   #+END_SRC

*** Aggressive Indent
    Emacs minor mode that keeps your code always indented.
    More reliable than electric-indent-mode.

    #+BEGIN_SRC emacs-lisp
      (use-package aggressive-indent
        :ensure t
        :commands (aggressive-indent-mode)
        :diminish aggressive-indent-mode "[a]")
    #+END_SRC
** Highlighting
*** Syntax
    #+BEGIN_SRC emacs-lisp
      (use-package font-lock
        :config
        (progn
          (setq font-lock-maximum-decoration t)))
    #+END_SRC
*** Indentation
    #+BEGIN_SRC emacs-lisp
      (use-package highlight-indentation
        :ensure t
        :diminish "[hi]"
        :commands (highlight-indentation-mode))
    #+END_SRC
** EditorConfig
   #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :ensure t
       :diminish "[ec]"
       :config
       (progn
         (editorconfig-mode)))
   #+END_SRC
** Expand region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :commands (er/expand-region)
       :bind ("C-=" . er/expand-region))
   #+END_SRC
** Eldoc
   #+BEGIN_SRC emacs-lisp
     (use-package eldoc
         :diminish eldoc-mode)
   #+END_SRC
** GTags
   #+BEGIN_SRC emacs-lisp :noweb tangle
     (use-package ggtags
         :ensure t
         :diminish ggtags-mode "[G]"
         :commands (ggtags-mode)
         :init
         (progn
             <<helm-gtags-use-package>>)
         :config
         (progn
             (setq ggtags-update-on-save nil)
             (setq ggtags-use-idutils t)
             (setq ggtags-sort-by-nearness t)
             (unbind-key "M-<" ggtags-mode-map)
             (unbind-key "M->" ggtags-mode-map)))
   #+END_SRC
*** Helm
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref helm-gtags-use-package
      (use-package helm-gtags
          :ensure t
          :commands (helm-gtags-select helm-gtags-find-tag)
          :init
          (progn
              (setq helm-gtags-fuzzy-match t)
              (setq helm-gtags-preselect t)
              (setq helm-gtags-prefix-key "\C-cg")
              (setq helm-gtags-path-style 'relative))
          :config
          (progn
              (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
              (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)))
    #+END_SRC
** LSP
   #+BEGIN_SRC emacs-lisp :noweb tangle
     (use-package lsp-mode
         :ensure t
         :diminish lsp-mode "[L]"
         :init
         (progn
             <<company-lsp-use-package>>

             (setq lsp-ui-peek-enable     nil
                   lsp-ui-sideline-enable nil
                   lsp-ui-imenu-enable    t
                   lsp-ui-doc-enable      t
                   lsp-ui-flycheck-enable t)))
   #+END_SRC
*** Company
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref company-lsp-use-package
      (use-package company-lsp
          :ensure t
          :config
          (progn
              (setq
               company-transformers            nil
               company-lsp-async               t
               company-lsp-cache-candidates    nil

               company-lsp-enable-recompletion t)))
    #+END_SRC
** Xref
   #+BEGIN_SRC emacs-lisp :noweb tangle
     (use-package xref
         :init
         (progn
             <<helm-xref-use-package>>))
   #+END_SRC
*** Helm
     #+BEGIN_SRC emacs-lisp  :tangle no :noweb-ref helm-xref-use-package
       (use-package helm-xref
           :ensure t
           :commands (helm-xref-show-xrefs)
           :config
           (progn
               (setq xref-show-xrefs-function 'helm-xref-show-xrefs)))
     #+END_SRC
** Debugging
   #+BEGIN_SRC emacs-lisp
     (use-package realgud
         :ensure t)
   #+END_SRC
