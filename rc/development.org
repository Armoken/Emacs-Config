* Project managment
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :bind (:map projectile-mode-map
                  ("C-x p o" . projectile-switch-open-project)
                  ("C-x p s" . projectile-switch-project)
                  ("<f9>"    . projectile-compile-project)
                  ("C-c p h" . helm-projectile)
                  ("C-c p p" . helm-projectile-switch-project)
                  ("C-c p f" . helm-projectile-find-file)
                  ("C-c p F" . helm-projectile-find-file-in-known-projects)
                  ("C-c p g" . helm-projectile-find-file-dwim)
                  ("C-c p d" . helm-projectile-find-dir)
                  ("C-c p e" . helm-projectile-recentf)
                  ("C-c p a" . helm-projectile-find-other-file)
                  ("C-c p i" . projectile-invalidate-cache)
                  ("C-c p z" . projectile-cache-current-file)
                  ("C-c p b" . helm-projectile-switch-to-buffer)
                  ("C-c p s" . helm-projectile-ag))

      :commands (projectile-global-mode
                 projectile-ignored-projects
                 projectile-compile-project)

      :init (progn
              (use-package helm-projectile
                :ensure t))

      :config
      (progn
        (projectile-global-mode)
        (setq projectile-completion-system 'helm)
        (setq projectile-switch-project-action 'helm-projectile)))
  #+END_SRC

* Static code analysis
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck-pos-tip
      :ensure t
      :commands flycheck-pos-tip-error-messages
      :init
      (progn
        (eval-after-load 'flycheck
          '(setq flycheck-display-error-messages
                 #'flycheck-pos-tip-error-messages)))
      :config
      (progn
        (setq flycheck-pos-tip-timeout 1)))

    (use-package flycheck
      :ensure t
      :diminish flycheck-mode "Ⓕ"
      :commands global-flycheck-mode
      :init
      (progn
        ;; Show errors under point in pos-tip popups.
        (global-flycheck-mode))
      :config
      (progn
        (setq flycheck-standard-error-navigation nil)
        (setq flycheck-idle-change-delay 0)
        (setq flycheck-check-syntax-automatically '(save mode-enabled))

        ;; Flycheck errors on a tooltip (doesnt work on console)
        (when (display-graphic-p (selected-frame))
          (eval-after-load 'flycheck
            '(custom-set-variables
              '(flycheck-display-errors-function
                #'flycheck-pos-tip-error-messages))))))
  #+END_SRC

* CEDET
** Semantic
   #+BEGIN_SRC emacs-lisp
     (use-package semantic
       :diminish semantic-mode "Ⓢ"
       :config (progn
                 (global-semanticdb-minor-mode 1)
                 (global-semantic-idle-scheduler-mode 1)
                 (semantic-mode 1)))
   #+END_SRC

* Complete anything
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :diminish company-mode
      :init
      (progn
        ;; This package adds fuzzy matching to Company
        (use-package company-flx
          :commands (company-flx-mode)
          :ensure t)

        ;; Documentation popup for Company
        (use-package company-quickhelp
          :ensure t
          :commands (company-quickhelp-manual-begin)
          :init
          (progn
            (eval-after-load 'company
              '(define-key company-active-map (kbd "M-h")
                 #'company-quickhelp-manual-begin)))
          :config
          (progn
            (company-quickhelp-mode)))

        ;; Sort completion candidates by previous completion choices
        (use-package company-statistics
          :ensure t
          :commands (company-statistics-mode)
          :init
          (progn
            (eval-after-load 'company
              '(company-statistics-mode))))

        (global-company-mode))
      :config
      (progn
        (setq company-tooltip-align-annotations t

              ;; Easy navigation to candidates with M-<n>
              company-idle-delay                0.0

              company-show-numbers              t
              company-minimum-prefix-length     1)

        (setq company-backends
              '((company-files      ;; files & directory
                 company-keywords   ;; keywords
                 company-capf)      ;; completion-at-point-functions function
                (company-abbrev     ;; abbreviations
                 company-dabbrev))) ;; dynamic abbreviations

        ;; Add yasnippet support for all company backends
        (defvar company-mode/enable-yas t
          "Enable yasnippet for all backends.")

        (defun company-mode/backend-with-yas (backend)
          (if (or (not company-mode/enable-yas)
                  (and (listp backend)
                       (member 'company-yasnippet backend)))
              backend
            (append (if (consp backend)
                        backend
                      (list backend))
                    '(:with company-yasnippet))))

        (setq company-backends
              (mapcar #'company-mode/backend-with-yas company-backends))

        (company-flx-mode)
        (define-key company-active-map (kbd "TAB")
          'company-complete-selection)))
  #+END_SRC

* Add folding
  #+BEGIN_SRC emacs-lisp
    (use-package hideshow
      :ensure t
      :diminish hs-minor-mode
      :commands (hs-minor-mode)
      :bind (:map hs-minor-mode-map
                  ("C-c f TAB" . hs-toggle-hiding)
                  ("C-c f h"   . hs-hide-all)
                  ("C-c f s"   . hs-show-all))
      :config
      (progn
                (add-to-list 'hs-special-modes-alist
                             (list 'nxml-mode
                                   "<!--\\|<[^/>]*[^/]>"
                                   "-->\\|</[^/>]*[^/]>"
                                   "<!--"
                                   'nxml-forward-element
                                   nil))))

    ;; For yaml mode and others
    (defun indenation-toggle-fold ()
      "Toggle fold all lines larger than indentation on current line"
      (interactive)
      (let ((col 1))
        (save-excursion
          (back-to-indentation)
          (setq col (+ 1 (current-column)))
          (set-selective-display
           (if selective-display nil (or col 1))))))
  #+END_SRC

* Add snippets
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :diminish yas-minor-mode
      :commands (yas-global-mode)
      :init
      (progn
        (yas-global-mode))
      :config
      (progn
        (setq yas-snippet-dirs
              '("~/.emacs.d/other/yasnippet/yasmate/snippets"
                "~/.emacs.d/other/yasnippet/snippets"))

        ;; Add yasnippet support for all company backends
        (defvar company-mode/enable-yas t "Enable yasnippet for all backends.")

        (yas-reload-all)))

  #+END_SRC

* Indents
  #+BEGIN_SRC emacs-lisp
    (setq-default tab-width 4)
    (setq-default pc-basic-offset 4)
    (setq-default standart-indent 4)
    (setq-default indent-tabs-mode t)
  #+END_SRC

* Automatically pairs braces and quotes
  #+BEGIN_SRC emacs-lisp
    (electric-pair-mode)
  #+END_SRC

* Syntax highlight
  #+BEGIN_SRC emacs-lisp
    (use-package font-lock
      :config
      (progn
        (setq font-lock-maximum-decoration t)))
  #+END_SRC

* Eldoc
  MinorMode which shows you, in the echo area, the argument
  list of the function call you are currently writing.

  #+BEGIN_SRC emacs-lisp
    (use-package eldoc
      :diminish eldoc-mode
      :config
      (progn
        (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)))
  #+END_SRC

* Highlighting indentation
  #+BEGIN_SRC emacs-lisp
    (use-package highlight-indentation
      :ensure t
      :diminish highlight-indentation-mode
      :commands highlight-indentation-mode)
  #+END_SRC

* EditorConfig
  EditorConfig helps developers define and maintain consistent
  coding styles between different editors and IDEs. The EditorConfig
  project consists of a file format for defining coding styles and a
  collection of text editor plugins that enable editors to read the
  file format and adhere to defined styles. EditorConfig files are
  easily readable and they work nicely with version control systems.

  #+BEGIN_SRC emacs-lisp
    (use-package editorconfig
      :ensure t
      :diminish editorconfig-mode
      :config
      (progn
        (editorconfig-mode)))
  #+END_SRC
* Smart Shift
  Smart Shift is a minor mode for conveniently shift the
  line/region to the left/right by the current major mode
  indentation width or shift line/region backwardly/forwardly by lines.

  #+BEGIN_SRC emacs-lisp
    (use-package smart-shift
      :ensure t
      :diminish smart-shift-mode
      :bind (:map smart-shift-mode-map
                  ("<C-up>" . smart-shift-up)
                  ("<C-down>" . smart-shift-down)
                  ("<C-left>" . smart-shift-left)
                  ("<C-right>" . smart-shift-right)))
  #+END_SRC
* Aggressive Indent
  Emacs minor mode that keeps your code always indented.
  More reliable than electric-indent-mode.

  #+BEGIN_SRC emacs-lisp
    (use-package aggressive-indent
      :ensure t
      :commands aggressive-indent-mode
      :diminish aggressive-indent-mode "Ⓘ")
  #+END_SRC
* Expand region
  Expand region increases the selected region by semantic units.
  Just keep pressing the key until it selects what you want.

  #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :ensure t
      :commands er/expand-region
      :bind ("C-=" . er/expand-region))
  #+END_SRC
