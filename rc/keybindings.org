* Movement between windows with M-arrow-keys M-arrow-keys (except org-mode)
   #+BEGIN_SRC emacs-lisp
    (if (equal nil (equal major-mode 'org-mode))
        (windmove-default-keybindings 'meta))
   #+END_SRC
* Delete many spaces as mash in tab
   #+BEGIN_SRC emacs-lisp
     (defun backward-delete-tab-whitespace ()
       "Delete many spaces as mash in tab."
       (interactive)
       (let ((p (point)))
         (cond
          ((and (eq indent-tabs-mode nil)
                (>= p tab-width)
                (eq (% (current-column) tab-width) 0)
                (string-match "^\\s-+$"
                              (buffer-substring-no-properties (- p tab-width) p)))
           (delete-char (- 0 tab-width)))
          (mark-active (delete-region (mark) p))
          (t (delete-char -1)))))

         (global-set-key (kbd "<backspace>") 'backward-delete-tab-whitespace)
   #+END_SRC
* Goto to line with specific number
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-g g") 'goto-line)
  #+END_SRC
* Add newline and indent on enter press
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "RET") 'newline-and-indent)
  #+END_SRC 
* Scroll screen without changing cursor position
  #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-n") (lambda () (interactive) (scroll-up 1)))
   (global-set-key (kbd "M-p") (lambda () (interactive) (scroll-down 1)))
  #+END_SRC
* Compilation
** Press to compile
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<f9>") 'compile)
  #+END_SRC
** Errors switching
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<f7>") 'next-error)
    (global-set-key (kbd "<f8>") 'previous-error)
  #+END_SRC
