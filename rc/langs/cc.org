#+TITLE: CCPP
#+OPTIONS: toc:nil num:nil ^:nil

C/C++ configuration for Emacs

* Prerequisites
** System
   :PROPERTIES:
   :CUSTOM_ID: ccpp-system-prerequisites
   :END:

   #+NAME: ccpp-system-prerequisites
   #+CAPTION: System prerequisites for C/C++ packages
* Packages
  :PROPERTIES:
  :CUSTOM_ID: ccpp-packages
  :END:

  #+NAME: ccpp-packages
  #+CAPTION: Packages for C/C++
  - [[https://github.com/Sarcasm/irony-mode][irony]] :: A C/C++ minor mode for Emacs powered by libclang
  - [[https://github.com/hotpxl/company-irony-c-headers][company-irony-c-headers]] ::  Company mode backend for C/C++ header files with Irony
  - [[https://github.com/Sarcasm/company-irony][company-irony]] :: company-mode completion back-end for irony-mode
  - [[https://github.com/Sarcasm/flycheck-irony][flycheck-irony]] :: C, C++ and Objective-C support for Flycheck, using Irony Mode
  - [[https://github.com/ikirill/irony-eldoc][irony-eldoc]] :: irony-mode support for eldoc-mode
  - [[https://github.com/sonatard/clang-format][clang-format]] :: Clang-format emacs integration for use with C/Objective-C/C++
  - [[https://github.com/ludwigpacifici/modern-cpp-font-lock][modern-cpp-font-lock]] :: C++ font-lock for Emacs
  - [[https://github.com/atilaneves/cmake-ide][cmake-ide]] :: Use Emacs as a C/C++ IDE
* Configuration
   #+BEGIN_SRC emacs-lisp :noweb yes
     (use-package cc-mode
         :mode (("\\.h\\'"   . c-mode)
                ("\\.c\\'"   . c-mode)
                ("\\.hpp\\'" . c++-mode)
                ("\\.cpp\\'" . c++-mode))
         :hook ((c-mode   . ayrc/c-hook)
                (c++-mode . ayrc/c++-hook))
         :init
         (progn
             <<clang-format-use-package>>
             <<irony-use-package>>
             <<gtags-use-package>>
             <<ccls-use-package>>
             <<cmake-ide-use-package>>
             <<modern-cpp-font-lock-use-package>>)
         :config
         (progn
             <<cc-configuration>>
             <<c-configuration>>
             <<c++-configuration>>

             (setq c-basic-offset       4
                   c-default-style      '((c-mode    . "k&r")
                                          (c++-mode  . "stroustrup")
                                          (java-mode . "java"))
                   c-doc-comment-style  '((java-mode . javadoc)
                                          (c-mode    . javadoc)
                                          (c++-mode  . javadoc)))))
   #+END_SRC

** CC configuration
   #+NAME: cc-configuration
   #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
     (defun ayrc/cc-hook ()
         (display-line-numbers-mode 1)
         (visual-line-mode          1)
         (auto-fill-mode            1)
         (ws-butler-mode            1)
         (smartparens-mode          1)
         (abbrev-mode               1)
         (semantic-mode             1)
         (yas-minor-mode            1)
         (hs-minor-mode             1)

         ;; Setup minor mods if any component need it
         (setq conf-variable-for-cc (list cc-eldoc-plugin
                                          cc-syntax-check-plugin
                                          cc-autocompletion-plugin))
         (if (member "irony" conf-variable-for-cc)
                 (ayrc/irony-setup))
         (if (member "gtags" conf-variable-for-cc)
                 (ayrc/gtags-setup))
         (if (member "ccls" conf-variable-for-cc)
                 (ayrc/ccls-setup))

         ;; Autocompletion setup
         (funcall (pcase cc-autocompletion-plugin
                      ("irony"  'ayrc/irony-autocompletion-setup)
                      ("gtags"  'ayrc/gtags-autocompletion-setup)
                      ("ccls"   'ayrc/ccls-autocompletion-setup)))

         ;; Syntax check setup
         (funcall (pcase cc-syntax-check-plugin
                      ("irony"  'ayrc/irony-syntax-check-setup)
                      ("gtags"  'ayrc/gtags-syntax-check-setup)
                      ("ccls"   'ayrc/ccls-syntax-check-setup)))

         ;; Eldoc setup
         (funcall (pcase cc-eldoc-plugin
                      ("irony"  'ayrc/irony-eldoc-setup)
                      ("gtags"  'ayrc/gtags-eldoc-setup)
                      ("ccls"   'ayrc/ccls-eldoc-setup))))
   #+END_SRC

*** Clang format 
     #+NAME: clang-format-use-package
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
       (use-package clang-format
           :ensure t
           :commands (clang-format clang-buffer clang-format-region))
     #+END_SRC

*** Irony
     #+NAME: irony-use-package
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
       (use-package irony
           :ensure t
           :diminish irony-mode "[I]"
           :init
           (progn
               <<irony-autocompletion-use-package>>
               <<irony-syntax-analytics-use-package>>
               <<irony-eldoc-use-package>>)
           :config
           (progn
               <<irony-autocompletion-config>>
               <<irony-syntax-analytics-config>>
               <<irony-eldoc-config>>

               (defun ayrc/irony-setup ()
                   (ayrc/local-set-keys '(("C-c C-r" . clang-format-region)))

                   (setq irony-server-install-prefix
                         (concat user-emacs-directory
                                 "/contrib/servers/irony"))

                   (irony-mode 1))))
     #+END_SRC

**** Autocompletion
     #+NAME: irony-autocompletion-use-package
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
       (use-package company-irony
           :ensure t)

       (use-package company-irony-c-headers
           :ensure t)
     #+END_SRC

     #+NAME: irony-autocompletion-config
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
       (setq company-irony-ignore-case 'smart)

       ;; Use compilation database first, clang_complete as fallback.
       (setq-default irony-cdb-compilation-databases
                     '(irony-cdb-libclang
                       irony-cdb-clang-complete))

       (defun ayrc/irony-autocompletion-setup ()
           (company-mode 1)
           (make-local-variable 'company-backends)

           (define-key irony-mode-map [remap completion-at-point]
               'irony-completion-at-point-async)
           (define-key irony-mode-map [remap complete-symbol]
               'irony-completion-at-point-async)
           (irony-cdb-autosetup-compile-options)

           ;; (optional) adds CC special commands to
           ;; `company-begin-commands' in order to
           ;; trigger completion at interesting places, such as after
           ;; scope operator std::|
           (company-irony-setup-begin-commands)

           (push '(company-irony-c-headers company-irony) company-backends))
     #+END_SRC

**** Syntax analytics
     #+NAME: irony-syntax-analytics-use-package
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
       (use-package flycheck-irony
           :ensure t)
     #+END_SRC

     #+NAME: irony-syntax-analytics-config
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
       (defun ayrc/irony-syntax-check-setup ()
           (flycheck-mode        1)
           (flycheck-irony-setup 1))
     #+END_SRC

**** Eldoc
     #+NAME: irony-eldoc-use-package
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
       (use-package irony-eldoc
           :ensure t)
     #+END_SRC

     #+NAME: irony-eldoc-config
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
       (defun ayrc/irony-eldoc-setup ()
           (eldoc-mode  1)
           (irony-eldoc 1))
     #+END_SRC

*** GTags
     #+NAME: gtags-use-package
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
       (use-package ggtags
           :ensure t
           :config
           (progn
               <<gtags-autocompletion-config>>
               <<gtags-syntax-analytics-config>>
               <<gtags-eldoc-config>>

               (defun gtags-setup ()
                   (ayrc/local-set-keys '(("C-c C-r" . clang-format-region)))

                   (setq-local imenu-create-index-function
                               #'ggtags-build-imenu-index)

                   (ggtags-mode 1))))
     #+END_SRC

**** Autocompletion
     #+NAME: gtags-autocompletion-config
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
       (defun ayrc/gtags-autocompletion-setup ()
           (company-mode 1)
           (make-local-variable 'company-backends)

           (push '(company-gtags) company-backends))
     #+END_SRC

**** Syntax analytics
     #+NAME: gtags-syntax-analytics-config
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
       (defun ayrc/gtags-syntax-check-setup ()
           (flycheck-mode 1))
     #+END_SRC

**** Eldoc
     #+NAME: gtags-eldoc-config
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
       (defun ayrc/gtags-eldoc-setup ()
           (eldoc-mode 1))
     #+END_SRC

*** CCLS
     #+NAME: ccls-use-package
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
       (use-package ccls
           :ensure t
           :diminish ccls-code-lens-mode
           :config
           (progn
               <<ccls-autocompletion-config>>
               <<ccls-syntax-analytics-config>>
               <<ccls-eldoc-config>>

               (defun ayrc/ccls-setup ()
                   (setq ccls-executable (executable-find "ccls"))

                   ;; Log file
                   (setq ccls-extra-args '("--log-file=/tmp/ccls-9999.log"))
                   (setq ccls-extra-init-params
                         '(
                           :index       (:comments 2)
                           :completion  (:detailedLabel t)))

                   ;; Add a lot of highlight mistakes
                   ;; (setq ccls-sem-highlight-method 'overlay)

                   (lsp-deferred)

                   ;; Debug support
                   (require 'dap-lldb))))
     #+END_SRC

**** Autocompletion
     #+NAME: ccls-autocompletion-config
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
       (defun ayrc/ccls-autocompletion-setup ())
     #+END_SRC

**** Syntax analytics
     #+NAME: ccls-syntax-analytics-config
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
       (defun ayrc/ccls-syntax-check-setup ())
     #+END_SRC

**** Eldoc
     #+NAME: ccls-eldoc-config
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
       (defun ayrc/ccls-eldoc-setup ()
           (eldoc-mode 1))
     #+END_SRC

*** CMake IDE
     #+NAME: cmake-ide-use-package
     #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
       (use-package cmake-ide
           :ensure t
           :commands (cmake-ide-setup))
     #+END_SRC

** C configuration
   #+NAME: c-configuration
   #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
     (defun ayrc/c-hook ()
         (ayrc/cc-hook)

         (setq clang-format-style               "Linux"
               flycheck-clang-language-standard "c99"
               irony-additional-clang-options   '("-Wall"
                                                  "-Wextra")))
   #+END_SRC

** C++ configuration
   #+NAME: modern-cpp-font-lock-use-package
   #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
     (use-package modern-cpp-font-lock
         :ensure t
         :diminish modern-c++-font-lock-mode
         :commands (modern-c++-font-lock-mode))
   #+END_SRC    

   #+NAME: c++-configuration
   #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
     (defun ayrc/c++-hook ()
         (ayrc/cc-hook)

         (modern-c++-font-lock-mode 1)

         (setq clang-format-style               "Google"
               flycheck-clang-language-standard "c++17"
               irony-additional-clang-options   '("-Wall"
                                                  "-Wextra")))
   #+END_SRC
