#+TITLE: Lisp
#+OPTIONS: toc:nil num:nil ^:nil

Lisp family languages configuration.

* Packages
  :PROPERTIES:
  :CUSTOM_ID: lisp-packages
  :END:

  #+NAME: config-packages
  #+CAPTION: Packages for config
  - [[https://www.emacswiki.org/emacs/ElDoc][eldoc]] :: Shows the argument list of the function call you are currently writing.
  - [[https://github.com/purcell/elisp-slime-nav][emacs-slime-nav]] :: Slime-style navigation of Emacs Lisp source with M-. & M-
  - [[https://github.com/Lindydancer/lisp-extra-font-lock][lisp-extra-font-lock]] :: Highlight bound variables and quoted expressions in lisp
  - [[https://www.emacswiki.org/emacs/ParEdit][paredit]] :: Minor mode for performing structured editing of S-expression data
  - [[https://github.com/Fuco1/smartparens][smartparens]] :: Minor mode for dealing with pairs in Emacs
  - [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] :: Mode which highlights delimiters such as parentheses,
    brackets or braces according to their depth.
* Lisp
   #+BEGIN_SRC emacs-lisp :noweb tangle
     (use-package lisp-mode
         :mode (("\\.el\\'"   .  emacs-lisp-mode)
                ("\\.rkt\\'"   . scheme-mode)
                ("\\.ss\\'"    . scheme-mode)
                ("\\.scm\\'"   . scheme-mode)
                ("\\.sch\\'"   . scheme-mode))
         :init
         (progn
             ;; Lisp configuration
             <<paredit>>
             <<rainbow-delimiters>>
             <<lisp-extra-font-lock>>

             <<lisp-hook>>
             (add-hook 'lisp-mode-hook                        'lisp-hook)
             (add-hook 'eval-expression-minibuffer-setup-hook 'lisp-hook)
             (add-hook 'ielm-mode-hook                        'lisp-hook)
             (add-hook 'lisp-interaction-mode-hook            'lisp-hook)
             (add-hook 'emacs-lisp-mode-hook                  'lisp-hook)

             ;; Emacs Lisp configuration
             <<elisp-slime-nav>>

             <<emacs-lisp-hook>>
             (add-hook 'eval-expression-minibuffer-setup-hook 'emacs-lisp-hook)
             (add-hook 'ielm-mode-hook                        'emacs-lisp-hook)
             (add-hook 'lisp-interaction-mode-hook            'emacs-lisp-hook)
             (add-hook 'emacs-lisp-mode-hook                  'emacs-lisp-hook)

             ;; Scheme configuration
             <<geiser>>

             <<scheme-hook>>
             (add-hook 'scheme-mode-hook 'lisp-hook)
             (add-hook 'scheme-mode-hook 'scheme-hook)))
   #+END_SRC

** Common configuration for all lisp dialects
*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref lisp-hook
      (defun lisp-hook ()
          (flycheck-mode)
          (hs-minor-mode)

          (aggressive-indent-mode)
          (eldoc-mode)
          (lisp-extra-font-lock-global-mode)

          (paredit-mode)
          (rainbow-delimiters-mode)
          (smartparens-mode)

          (prettify-symbols-mode)
          (setq prettify-symbols-unprettify-at-point 'right-edge)
          (push '(">=" . ?≥) prettify-symbols-alist)
          (push '("<=" . ?≤) prettify-symbols-alist)
          (push '("lambda"  . ?λ) prettify-symbols-alist)

          (setq lisp-body-indent 4)

          (add-hook 'write-contents-functions
                    'cleanup-buffer-notabs nil t))
    #+END_SRC

*** Comfortable parens editing
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref paredit
      (use-package paredit
          :ensure t
          :diminish paredit-mode "[pe]"
          :config
          (progn
              ;; Whenever the listed commands are used, ElDoc will automatically
              ;; refresh the minibuffer.
              (eldoc-add-command
               'paredit-backward-delete
               'paredit-close-round)))
    #+END_SRC

*** Highlights delimiters such as parentheses, brackets or braces according to their depth
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref rainbow-delimiters
      (use-package rainbow-delimiters
          :ensure t)
    #+END_SRC

*** Highlight bound variables and quoted expressions in lisp
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref lisp-extra-font-lock
      (use-package lisp-extra-font-lock
          :ensure t
          :diminish lisp-extra-font-lock-mode "[lefl]")
    #+END_SRC

** Emacs Lisp
*** Navigation of source with M-. & M-,
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref elisp-slime-nav
      (use-package elisp-slime-nav
          :ensure t
          :diminish elisp-slime-nav-mode "[sn]"
          :commands (turn-on-elisp-slime-nav-mode))
    #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref emacs-lisp-hook
      (defun emacs-lisp-hook ()
          (turn-on-elisp-slime-nav-mode)

          (add-to-list (make-local-variable 'company-backends)
                       '(company-elisp company-yasnippet)))
    #+END_SRC

** Scheme
*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref scheme-hook
      (defun scheme-hook ()
          (geiser-mode)

          (add-to-list (make-local-variable 'company-backends)
                       '(company-capf company-dabbrev-code)))
    #+END_SRC

*** Main minor mode
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref geiser
      (use-package geiser
          :ensure t
          :config
          (progn
              (setq geiser-active-implementations '(racket guile))))
    #+END_SRC
