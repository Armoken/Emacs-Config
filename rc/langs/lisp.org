#+TITLE: Lisp
#+OPTIONS: toc:nil num:nil ^:nil

Lisp family languages configuration.

* Packages
  :PROPERTIES:
  :CUSTOM_ID: lisp-packages
  :END:

  #+NAME: config-packages
  #+CAPTION: Packages for config
  - [[https://www.emacswiki.org/emacs/ElDoc][eldoc]] :: Shows the argument list of the function call you are currently writing.
  - [[https://github.com/purcell/elisp-slime-nav][emacs-slime-nav]] :: Slime-style navigation of Emacs Lisp source with M-. & M-
  - [[https://github.com/Lindydancer/lisp-extra-font-lock][lisp-extra-font-lock]] :: Highlight bound variables and quoted expressions in lisp
  - [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] :: Mode which highlights delimiters such as parentheses,
    brackets or braces according to their depth.
* Lisp
   #+BEGIN_SRC emacs-lisp :noweb tangle
     (use-package lisp-mode
         :mode (("\\.el\\'"   .  emacs-lisp-mode)
                ("\\.rkt\\'"   . scheme-mode)
                ("\\.ss\\'"    . scheme-mode)
                ("\\.scm\\'"   . scheme-mode)
                ("\\.sch\\'"   . scheme-mode))
         :init
         (progn
             <<rainbow-delimiters-use-package>>
             <<lisp-extra-font-lock-use-package>>
             <<elisp-slime-nav-use-package>>
             <<geiser-use-package>>)
         :config
         (progn
             <<lisp-hook>>
             <<emacs-lisp-hook>>
             <<scheme-hook>>

             (mapc (lambda (hook) (add-hook hook 'ayrc/emacs-lisp-hook))
                   (list 'eval-expression-minibuffer-setup-hook
                         'ielm-mode-hook
                         'lisp-interaction-mode-hook
                         'emacs-lisp-mode-hook))
             (add-hook 'scheme-mode-hook 'ayrc/scheme-hook)))
   #+END_SRC

** Common configuration for all lisp dialects
*** Highlights delimiters such as parentheses, brackets or braces according to their depth
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref rainbow-delimiters-use-package
      (use-package rainbow-delimiters
          :ensure t)
    #+END_SRC

*** Highlight bound variables and quoted expressions in lisp
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref lisp-extra-font-lock-use-package
      (use-package lisp-extra-font-lock
          :ensure t
          :diminish lisp-extra-font-lock-mode "[lefl]")
    #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref lisp-hook
      (defun ayrc/lisp-hook ()
          (display-line-numbers-mode)
          (visual-line-mode)
          (ws-butler-mode)
          (smartparens-mode)
          (semantic-mode)

          (company-mode)
          (flycheck-mode)
          (hs-minor-mode)

          (aggressive-indent-mode)
          (rainbow-delimiters-mode)
          (eldoc-mode)
          (lisp-extra-font-lock-mode)

          (prettify-symbols-mode)
          (setq prettify-symbols-unprettify-at-point 'right-edge)
          (push '(">=" . ?≥) prettify-symbols-alist)
          (push '("<=" . ?≤) prettify-symbols-alist)
          (push '("lambda"  . ?λ) prettify-symbols-alist)

          (setq lisp-body-indent 4)

          (add-hook 'write-contents-functions
                    'ayrc/cleanup-buffer-notabs nil t))
    #+END_SRC

** Emacs Lisp
*** Navigation of source with M-. & M-,
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref elisp-slime-nav-use-package
      (use-package elisp-slime-nav
          :ensure t
          :diminish elisp-slime-nav-mode "[sn]")
    #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref emacs-lisp-hook
      (defun ayrc/emacs-lisp-hook ()
          (ayrc/lisp-hook)

          (turn-on-elisp-slime-nav-mode)

          (add-to-list (make-local-variable 'company-backends)
                       '(company-elisp company-yasnippet)))
    #+END_SRC

** Scheme
*** Main minor mode
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref geiser-use-package
      (use-package geiser
          :ensure t
          :config
          (progn
              (setq geiser-active-implementations '(racket guile))))
    #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref scheme-hook
      (defun ayrc/scheme-hook ()
          (ayrc/lisp-hook)

          (geiser-mode)

          (add-to-list (make-local-variable 'company-backends)
                       '(company-capf company-dabbrev-code)))
    #+END_SRC
