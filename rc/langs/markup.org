#+TITLE: Markup
#+OPTIONS: toc:nil num:nil ^:nil

* Configuration
** JSON
    #+NAME: json-system-prerequisites
    #+CAPTION: System prerequisites for json packages
    - [[https://github.com/dmeranda/demjson][demjson]] :: Python module for JSON data encoding, including jsonlint

   #+BEGIN_SRC emacs-lisp :noweb tangle :noweb yes
     (use-package json-mode
         :mode (("\\.json\\'" . json-mode))
         :hook (json-mode . ayrc/json-hook)
         :bind (:map json-mode-map
                     ("C-c C-r" . json-pretty-print))
         :init
         (progn
             <<flycheck-demjsonlint-use-package>>)
         :preface
         (progn
             <<json-hook>>))
   #+END_SRC

*** Flycheck
    #+NAME: flycheck-demjsonlint-use-package
    #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
      (use-package flycheck-demjsonlint
          :ensure t
          :after (json-mode flycheck))
    #+END_SRC

*** Hook
    #+NAME: json-hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
      (defun ayrc/json-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (yas-minor-mode            1)

          (company-mode              1)
          (hs-minor-mode             1)

          (setq js-indent-level 4))
    #+END_SRC

** [[https://github.com/yoshiki/yaml-mode][Yaml]]
    #+NAME: yaml-system-prerequisites
    #+CAPTION: System prerequisites for yaml packages
    - [[https://github.com/adrienverge/yamllint][yamllint]] :: A linter for YAML files

   #+BEGIN_SRC emacs-lisp :noweb tangle :noweb yes
     (use-package yaml-mode
         :ensure t
         :mode (("\\.yml\\'"  . yaml-mode)
                ("\\.yaml\\'" . yaml-mode))
         :bind (:map yaml-mode-map
                     ("C-c f TAB" . indenation-toggle-fold))
         :hook (yaml-mode . ayrc/yaml-hook)
         :preface
         (progn
             <<yaml-hook>>))
   #+END_SRC

*** Hook
    #+NAME: yaml-hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
      (defun ayrc/yaml-hook ()
          (display-line-numbers-mode  1)
          (visual-line-mode           1)
          (ws-butler-mode             1)
          (smart-shift-mode           1)
          (smartparens-mode           1)
          (semantic-mode              1)
          (yas-minor-mode             1)

          (flycheck-mode              1)
          (flycheck-yamllint-setup    1)

          (company-mode               1)
          (hs-minor-mode              1)
          (highlight-indentation-mode 1)
          (smart-shift-mode           1)

          (setq yaml-indent-offset 2))
    #+END_SRC

** XML
   #+BEGIN_SRC emacs-lisp :noweb tangle :noweb yes
     (use-package nxml
         :ensure t
         :commands (nxml-mode)
         :mode ("\\.\\(xml\\|axml\\|xsl|xaml\\)$" . nxml-mode)
         :hook (nxml-mode . ayrc/nxml-hook)
         :preface
         (progn
             <<nxml-hook>>))
   #+END_SRC

*** Hook
    #+NAME: nxml-hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
      (defun ayrc/nxml-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (yas-minor-mode            1)

          (hs-minor-mode             1)

          (company-mode              1)
          (make-local-variable 'company-backends)
          (add-to-list 'company-backends
                       '(company-nxml company-yasnippet)))
    #+END_SRC

** [[http://github.com/paradoxxxzero/jinja2-mode][Jinja2]]
   #+BEGIN_SRC emacs-lisp :noweb tangle :noweb yes
     (use-package jinja2-mode
         :ensure t
         :commands (jinja2-mode)
         :mode (("\\.j2\\'" . jinja2-mode))
         :hook (jinja2-mode . ayrc/jinja2-hook)
         :preface
         (progn
             <<jinja2-hook>>))
   #+END_SRC

*** Hook
    #+NAME: jinja2-hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
      (defun ayrc/jinja2-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (yas-minor-mode            1)

          (company-mode              1)
          (make-local-variable 'company-backends))
    #+END_SRC

** RST
   #+BEGIN_SRC emacs-lisp :noweb tangle :noweb yes
      (use-package rst
          :mode (("\\.txt$" . rst-mode)
                 ("\\.rst$" . rst-mode))
          :hook (rst-mode . ayrc/rst-hook)
          :preface
          (progn
              <<rst-hook>>))
   #+END_SRC

*** Hook
    #+NAME: rst-hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb yes
      (defun ayrc/rst-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (yas-minor-mode            1)

          (company-mode              1)
          (make-local-variable 'company-backends))
    #+END_SRC

** [[https://jblevins.org/projects/markdown-mode/][Markdown]]
    #+NAME: markdown-system-prerequisites
    #+CAPTION: System prerequisites for markdown packages
    - [[https://github.com/trentm/python-markdown2][python-markdown2]] :: A fast and complete implementation of Markdown

   #+BEGIN_SRC emacs-lisp :noweb tangle
     (use-package markdown-mode
         :ensure t
         :commands (markdown-mode gfm-mode)
         :mode (("README\\.md\\'" . gfm-mode)
                ("\\.md\\'"       . markdown-mode)
                ("\\.markdown\\'" . markdown-mode))
         :hook (markdown-mode . ayrc/markdown-hook)
         :init
         (progn
             <<markdown-plus-use-package>>
             <<markdown-preview-use-package>>)
         :preface
         (progn
             <<markdown-hook>>))
   #+END_SRC

*** [[https://github.com/milkypostman/markdown-mode-plus][Markdown+]]
    Additional functions for Emacs [markdown-mode]

    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref markdown-plus-use-package
      (use-package markdown-mode+
          :ensure t
          :commands (markdown-cleanup-list-numbers
                     markdown-export-latex
                     markdown-copy-html
                     markdown-copy-rtf))
    #+END_SRC

*** [[https://github.com/ancane/markdown-preview-mode][Preview]]
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref markdown-preview-use-package
      (use-package markdown-preview-mode
          :ensure t
          :commands (markdown-preview-mode
                     markdown-preview-open-browser
                     markdown-preview-cleanup)
          :config
          (progn
              (add-to-list 'markdown-preview-stylesheets
                           "https://raw.githubusercontent.com/richleland/pygments-css/master/emacs.css")
              (add-to-list 'markdown-preview-javascript
                           "http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML")
              (add-to-list 'markdown-preview-javascript
                           '("http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML" . async))))
    #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref markdown-hook
      (defun ayrc/markdown-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (yas-minor-mode            1)

          (company-mode              1)
          (make-local-variable 'company-backends)

          (setq markdown-command "markdown2"))
    #+END_SRC
