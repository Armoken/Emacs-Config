* Configuration
** Virtualization
*** Containers
**** Docker
    #+BEGIN_SRC emacs-lisp
      (use-package dockerfile-mode
          :ensure t
          :mode (("Dockerfile'"       . dockerfile-mode)
                 ("\\.Dockerfile\\'"  . dockerfile-mode))
          :hook (dockerfile-mode . ayrc/dockerfile-hook)
          :config
          (progn
              (defun ayrc/dockerfile-hook ()
                  (display-line-numbers-mode 1)
                  (visual-line-mode          1)
                  (auto-fill-mode            1)
                  (ws-butler-mode            1)
                  (smartparens-mode          1)
                  (semantic-mode             1)
                  (yas-minor-mode            1)

                  (company-mode              1))))
    #+END_SRC

** Nginx
   #+BEGIN_SRC emacs-lisp
     (use-package nginx-mode
         :ensure t
         :mode (("nginx\.conf\.?.*$" . nginx-mode))
         :hook (nginx-mode . ayrc/nginx-hook)
         :config
         (progn
             (defun ayrc/nginx-hook ()
                 (display-line-numbers-mode 1)
                 (visual-line-mode          1)
                 (auto-fill-mode            1)
                 (ws-butler-mode            1)
                 (smartparens-mode          1)
                 (semantic-mode             1)
                 (yas-minor-mode            1)

                 (company-mode              1))))
   #+END_SRC

** Systemd
   #+BEGIN_SRC emacs-lisp
     (use-package systemd
         :ensure t
         :mode (("\\.service\\'"   . systemd-mode)
                ("\\.target\\'"    . systemd-mode)
                ("\\.socket\\'"    . systemd-mode)
                ("\\.service\\'"   . systemd-mode)
                ("\\.timer\\'"     . systemd-mode)
                ("\\.mount\\'"     . systemd-mode)
                ("\\.automount\\'" . systemd-mode)
                ("\\.slice\\'"     . systemd-mode)
                ("\\.path\\'"      . systemd-mode)
                ("\\.netdev\\'"    . systemd-mode)
                ("\\.network\\'"   . systemd-mode)
                ("\\.link\\'"      . systemd-mode))
         :hook (systemd-mode . ayrc/systemd-hook)
         :config
         (progn
             (defun ayrc/systemd-hook ()
                 (display-line-numbers-mode 1)
                 (visual-line-mode          1)
                 (auto-fill-mode            1)
                 (ws-butler-mode            1)
                 (smartparens-mode          1)
                 (semantic-mode             1)
                 (yas-minor-mode            1)

                 (company-mode              1))))
   #+END_SRC

** Ini
   #+BEGIN_SRC emacs-lisp
     (use-package ini-mode
         :ensure t
         :mode (("\\.ini\\'" . ini-mode))
         :hook (ini-mode . ayrc/ini-hook)
         :config
         (progn
             (defun ayrc/ini-hook ()
                 (display-line-numbers-mode 1)
                 (visual-line-mode          1)
                 (auto-fill-mode            1)
                 (ws-butler-mode            1)
                 (smartparens-mode          1)
                 (semantic-mode             1)
                 (yas-minor-mode            1)

                 (company-mode              1))))
   #+END_SRC

** Plantuml
   #+BEGIN_SRC emacs-lisp
     (use-package plantuml-mode
         :ensure t
         :mode (("\\.plantuml\\'" . plantuml-mode))
         :hook (plantuml-mode . ayrc/plantuml-hook)
         :init
         (progn
             (use-package flycheck-plantuml
                 :ensure t
                 :commands (flycheck-plantuml-setup)))
         :config
         (progn
             (defun ayrc/plantuml-hook ()
                 (display-line-numbers-mode 1)
                 (visual-line-mode          1)
                 (auto-fill-mode            1)
                 (ws-butler-mode            1)
                 (smartparens-mode          1)
                 (semantic-mode             1)
                 (yas-minor-mode            1)

                 (company-mode              1)
                 (flycheck-plantuml-setup   1)

                 (setq plantuml-jar-path "/usr/share/plantuml/lib/plantuml.jar")
                 (setq plantuml-output-type "svg"))))
   #+END_SRC

** Dotenv
  #+BEGIN_SRC emacs-lisp
    (use-package dotenv-mode
        :ensure t
        :mode (("\\.env\\'" . dotenv-mode))
        :hook (dotenv-mode . ayrc/dotenv-hook)
        :config
        (progn
            (defun ayrc/dotenv-hook ()
                (display-line-numbers-mode 1)
                (visual-line-mode          1)
                (auto-fill-mode            1)
                (ws-butler-mode            1)
                (smartparens-mode          1)
                (semantic-mode             1)
                (yas-minor-mode            1)

                (company-mode              1))))
  #+END_SRC
