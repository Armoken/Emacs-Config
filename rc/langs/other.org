* Configuration
** Virtualization
*** Containers
**** [[https://github.com/spotify/dockerfile-mode][Docker]]
    #+BEGIN_SRC emacs-lisp :noweb tangle
      (use-package dockerfile-mode
          :ensure t
          :mode (("Dockerfile'"       . dockerfile-mode)
                 ("\\.Dockerfile\\'"  . dockerfile-mode))
          :hook (dockerfile-mode . ayrc/dockerfile-hook)
          :preface
          (progn
              <<dockerfile-hook>>))
    #+END_SRC

***** Hook
      #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref dockerfile-hook
        (defun ayrc/dockerfile-hook ()
            (display-line-numbers-mode 1)
            (visual-line-mode          1)
            (ws-butler-mode            1)
            (smart-shift-mode          1)
            (smartparens-mode          1)
            (semantic-mode             1)
            (yas-minor-mode            1)

            (company-mode              1))
      #+END_SRC

** [[https://github.com/ajc/nginx-mode][Nginx]]
   #+BEGIN_SRC emacs-lisp :noweb tangle
     (use-package nginx-mode
         :ensure t
         :mode (("nginx\.conf\.?.*$" . nginx-mode))
         :hook (nginx-mode . ayrc/nginx-hook)
         :init
         (progn
             <<company-nginx-use-package>>)
         :preface
         (progn
             <<nginx-hook>>))
   #+END_SRC

*** [[https://github.com/stardiviner/company-nginx][Autocompletion]]
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref company-nginx-use-package
      (use-package company-nginx
          :ensure t
          :after (nginx-mode))
    #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref nginx-hook
      (defun ayrc/nginx-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (yas-minor-mode            1)

          (company-mode              1)
          (company-nginx-keywords))
    #+END_SRC

** [[https://github.com/holomorph/systemd-mode][Systemd]]
   #+BEGIN_SRC emacs-lisp :noweb tangle
     (use-package systemd
         :ensure t
         :mode (("\\.service\\'"   . systemd-mode)
                ("\\.target\\'"    . systemd-mode)
                ("\\.socket\\'"    . systemd-mode)
                ("\\.service\\'"   . systemd-mode)
                ("\\.timer\\'"     . systemd-mode)
                ("\\.mount\\'"     . systemd-mode)
                ("\\.automount\\'" . systemd-mode)
                ("\\.slice\\'"     . systemd-mode)
                ("\\.path\\'"      . systemd-mode)
                ("\\.netdev\\'"    . systemd-mode)
                ("\\.network\\'"   . systemd-mode)
                ("\\.link\\'"      . systemd-mode))
         :hook (systemd-mode . ayrc/systemd-hook)
         :preface
         (progn
             <<systemd-hook>>))
   #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref systemd-hook
      (defun ayrc/systemd-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (yas-minor-mode            1)

          (company-mode              1))
    #+END_SRC

** [[https://github.com/emacs-mirror/emacs/blob/master/lisp/textmodes/conf-mode.el][Conf]]
   #+BEGIN_SRC emacs-lisp :noweb tangle
     (use-package conf-mode
         :mode (("\\.toml\\'" . conf-toml-mode)
                ("\\.ini\\'" . conf-windows-mode))
         :hook ((conf-toml-mode-hook    . ayrc/conf-hook)
                (conf-windows-mode-hook . ayrc/conf-hook))
         :preface
         (progn
             <<conf-hook>>))
   #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref conf-hook
      (defun ayrc/conf-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (yas-minor-mode            1)

          (company-mode              1))
    #+END_SRC

** [[https://github.com/skuro/plantuml-mode][Plantuml]]
   #+BEGIN_SRC emacs-lisp :noweb tangle
     (use-package plantuml-mode
         :ensure t
         :mode (("\\.plantuml\\'" . plantuml-mode))
         :hook (plantuml-mode . ayrc/plantuml-hook)
         :init
         (progn
             <<flycheck-plantuml-use-package>>)
         :preface
         (progn
             <<plantuml-hook>>))
   #+END_SRC

*** [[https://github.com/alexmurray/flycheck-plantuml][Flycheck]]
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref flycheck-plantuml-use-package
      (use-package flycheck-plantuml
          :ensure t
          :commands (flycheck-plantuml-setup))
    #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref plantuml-hook
      (defun ayrc/plantuml-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (yas-minor-mode            1)

          (company-mode              1)
          (flycheck-plantuml-setup   1)

          (setq plantuml-jar-path "/usr/share/plantuml/lib/plantuml.jar")
          (setq plantuml-output-type "svg"))


    #+END_SRC

** [[https://github.com/preetpalS/emacs-dotenv-mode][Dotenv]]
   #+BEGIN_SRC emacs-lisp :noweb tangle
    (use-package dotenv-mode
        :ensure t
        :mode (("\\.env\\'" . dotenv-mode))
        :hook (dotenv-mode . ayrc/dotenv-hook)
        :preface
        (progn
            <<dotenv-hook>>))
   #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref dotenv-hook
      (defun ayrc/dotenv-hook ()
          (display-line-numbers-mode 1)
          (visual-line-mode          1)
          (ws-butler-mode            1)
          (smart-shift-mode          1)
          (smartparens-mode          1)
          (semantic-mode             1)
          (yas-minor-mode            1)

          (company-mode              1))
    #+END_SRC
