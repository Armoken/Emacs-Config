#+TITLE: Python
#+OPTIONS: toc:nil num:nil ^:nil

Python configuration for Emacs

* Prerequisites
  Installation path: pyenv -> python
                           -> virtualenv
                           -> install all packages by running function above
** System
   :PROPERTIES:
   :CUSTOM_ID: python-system-prerequisites
   :END:

   #+NAME: python-system-prerequisites
   #+CAPTION: System prerequisites for python packages

   - [[https://github.com/pyenv/pyenv][Pyenv]] :: [[https://github.com/pyenv/pyenv-installer][pyenv-installer]] and take a look at [[https://github.com/pyenv/pyenv/wiki/Common-build-problems][common build problems]]
   - [[https://github.com/pypa/pipenv][Pipenv]] :: Python Development Workflow for Humans
** Language
   :PROPERTIES:
   :CUSTOM_ID: python-language-prerequisites
   :END:

   #+NAME: python-language-prerequisites
   #+CAPTION: Language prerequisites for python packages

   Add language prerequisite to this list after its first mention in 
   list after function definition below
   #+BEGIN_SRC emacs-lisp
   (setq python-language-prerequisites '())
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defun install-python-language-prerequisites ()
         "Install python language prerequisites.

     Prerequisites listed in python-language-prerequisites
     global variable"
         (interactive)
         (when (and (buffer-modified-p)
                    (y-or-n-p (format "Save file %s? " (buffer-file-name))))
             (save-buffer))

         (let* ((buf-name "*prerequisites-installation*")
                (buffer (get-buffer-create buf-name))
                (process (get-buffer-process buffer))
                (cmd-args (append (list "-m" "pip" "install")
                                  python-language-prerequisites)))
             (when (and process
                        (process-live-p process))
                 (setq buffer (generate-new-buffer buf-name)))

             (with-current-buffer buffer
                 (let ((inhibit-read-only t))
                     (erase-buffer))

                 (insert "Installing python language prerequisites\n")

                 (pythonic-start-process
                  :process "PrerequisitesInstaller"
                  :buffer buffer
                  :args cmd-args)

                 (move-marker (process-mark (get-buffer-process buffer))
                              (point-max)
                              buffer)

                 (comint-mode)
                 (setq-local comint-prompt-read-only t)
                 (pop-to-buffer buffer))))
   #+END_SRC

   Prerequisites:
*** [[https://github.com/palantir/python-language-server][pyls]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "python-language-server")
   #+END_SRC

*** [[https://github.com/tomv564/pyls-mypy][pyls-mypy]]                                            :temporary_disabled:
   #+BEGIN_SRC emacs-lisp
     ;; (add-to-list 'python-language-prerequisites "pyls-mypy")
   #+END_SRC

*** [[https://github.com/tomv564/pyls-mypy][pyls-isort]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "pyls-isort")
   #+END_SRC

*** [[https://github.com/tomv564/pyls-mypy][pyls-black]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "pyls-black")
   #+END_SRC

*** [[https://www.pylint.org/][Pylint]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "pylint")
   #+END_SRC

*** [[https://github.com/davidhalter/jedi][Jedi]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "jedi")
   #+END_SRC

*** [[https://github.com/python-rope/rope][Rope]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "rope")
   #+END_SRC

*** [[https://github.com/PyCQA/pyflakes][pyflakes]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "pyflakes")
   #+END_SRC

*** [[https://github.com/PyCQA/mccabe][mccabe]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "mccabe")
   #+END_SRC

*** [[https://github.com/PyCQA/pycodestyle][pycodestyle]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "pycodestyle")
   #+END_SRC

*** [[https://github.com/PyCQA/pydocstyle][pydocstyle]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "pydocstyle")
   #+END_SRC

*** [[https://github.com/hhatto/autopep8][Autopep8]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "autopep8")
   #+END_SRC

*** [[https://github.com/google/yapf][Yapf]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "yapf")
   #+END_SRC

*** [[https://github.com/ipython/ipython][ipython]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "ipython")
   #+END_SRC

* Packages
  :PROPERTIES:
  :CUSTOM_ID: python-packages
  :END:

  #+NAME: python-packages
  #+CAPTION: Packages for python
  - [[https://github.com/paetzke/py-yapf.el][py-yapf]] :: Use yapf to beautify a Python buffer
  - [[https://github.com/pwalsh/pipenv.el][pipenv.el]] :: A Pipenv porcelain inside Emacs
  - [[https://github.com/proofit404/pyenv-mode][pyenv-mode]] :: Integrate pyenv with python-mode
  - [[https://github.com/tkf/emacs-python-environment][python-environment]] :: Python virtualenv API for Emacs Lisp
  - [[https://github.com/Wilfred/pip-requirements.el][pip-requirements]] :: Major mode for editing pip requirements files
  - [[https://github.com/paetzke/py-isort.el][py-isort.el]] :: Integrates isort into Emacs.
  - [[https://github.com/Wilfred/pyimport][pyimport]] :: Manage Python imports from Emac
  - [[https://github.com/naiquevin/sphinx-doc.el][sphinx-doc]] ::  Generate Sphinx friendly docstrings for Python functions
* Configuration
** Python
     Python mode settings for Emacs

   #+BEGIN_SRC emacs-lisp :noweb tangle :noweb yes
     (use-package python-mode
         :ensure t
         :mode (("wscript"   . python-mode)
                ("\\.py\\'"  . python-mode))
         :hook (python-mode . ayrc/python-hook)
         :init
         (progn
             <<pyenv-mode-use-package>>
             <<pipenv-mode-use-package>>

             <<pyimport-use-package>>
             <<py-isort-use-package>>
             <<sphinx-doc-use-package>>)
         :config
         (progn
             <<python-hook>>))
   #+END_SRC

*** Hook
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref python-hook
      (defun ayrc/python-hook ()
          (display-line-numbers-mode)
          (visual-line-mode)
          (ws-butler-mode)
          (smartparens-mode)
          (abbrev-mode)
          (semantic-mode)

          (setq python-shell-interpreter "ipython"
                python-shell-interpreter-args "-i --simple-prompt")

          (pipenv-mode)
          (pyenv-mode)
          (hs-minor-mode)
          (sphinx-doc-mode)

          (require 'lsp-pyls)
          (lsp-deferred))
      (add-hook 'python-mode-hook #'ayrc/python-hook)
    #+END_SRC

*** Env setup modes
**** Pyenv
     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref pyenv-mode-use-package
       (use-package pyenv-mode
           :ensure t
           :diminish
           :config
           (progn
               (setq pyenv-show-active-python-in-modeline t)))
     #+END_SRC

**** Pipenv
     #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref pipenv-mode-use-package
       (use-package pipenv
           :ensure t
           :diminish
           :config
           (progn
               (setq pipenv-projectile-after-switch-function
                     #'pipenv-projectile-after-switch-extended)))
     #+END_SRC

*** Sphinx doc in docstrings
    #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref sphinx-doc-use-package
      (use-package sphinx-doc
          :ensure t
          :diminish sphinx-doc-mode "[spnxd]"
          :commands (sphinx-doc-mode))
    #+END_SRC

** Pip requirments
   Pip requirments for Emacs
   #+BEGIN_SRC emacs-lisp
     (use-package pip-requirements
         :ensure t
         :mode (("requirements.txt$" . pip-requirements-mode)
                ("requirements.pip$" . pip-requirements-mode))
         :config
         (progn
             (defun ayrc/pip-hook ()
                 (display-line-numbers-mode)
                 (visual-line-mode)
                 (ws-butler-mode)
                 (smartparens-mode)
                 (semantic-mode))
             (add-hook 'pip-requirements-mode 'ayrc/pip-hook)))
   #+END_SRC
