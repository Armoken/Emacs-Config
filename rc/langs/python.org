#+TITLE: Python
#+OPTIONS: toc:nil num:nil ^:nil

Python configuration for Emacs

* Prerequisites
  Installation path: pyenv -> python
                           -> virtualenv
                           -> install all packages by running function above
** System
   :PROPERTIES:
   :CUSTOM_ID: python-system-prerequisites
   :END:

   #+NAME: python-system-prerequisites
   #+CAPTION: System prerequisites for python packages

 - [[https://github.com/pyenv/pyenv][Pyenv]] :: [[https://github.com/pyenv/pyenv-installer][pyenv-installer]] and watch [[https://github.com/pyenv/pyenv/wiki/Common-build-problems][common build problems]]
** Language
   :PROPERTIES:
   :CUSTOM_ID: python-language-prerequisites
   :END:

   #+NAME: python-language-prerequisites
   #+CAPTION: Language prerequisites for python packages

   Add language prerequisite to this list after its first mention in 
   list after function definition below
   #+BEGIN_SRC emacs-lisp
   (setq python-language-prerequisites '())
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defun install-python-language-prerequisites ()
         "Install python language prerequisites.

     Prerequisites listed in python-language-prerequisites
     global variable"
         (interactive)
         (when (and (buffer-modified-p)
                    (y-or-n-p (format "Save file %s? " (buffer-file-name))))
             (save-buffer))

         (let ((default-directory (pythonic-default-directory))
               (process-environment (copy-sequence process-environment)))
             (pythonic-set-process-environment)
             (let ((command
                    (format "%s -c \"import pip; pip.main([\'install\', %s])\""
                            (pythonic-executable)
                            (string-join
                             (mapcar '(lambda (str)
                                          (format "\'%s\'" str))
                                     python-language-prerequisites)
                             ", ")))
                   (buffer-name-function
                    #'(lambda (maj-mode)
                          "*python-language-prerequisites-installation*")))
                 (compilation-start command nil buffer-name-function))))
   #+END_SRC

   Prerequisites:
*** [[https://www.pylint.org/][Pylint]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "pylint")
   #+END_SRC
*** [[https://github.com/python-rope/rope][Rope]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "rope")
   #+END_SRC
*** [[https://github.com/davidhalter/jedi][Jedi]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "jedi")
   #+END_SRC
*** [[https://gitlab.com/pycqa/flake8][Flake8]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "flake8")
   #+END_SRC
*** [[https://github.com/hhatto/autopep8][Autopep8]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "autopep8")
   #+END_SRC
*** [[https://github.com/google/yapf][Yapf]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "yapf")
   #+END_SRC
*** [[https://github.com/timothycrosley/isort][isort]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "isort")
   #+END_SRC
*** [[https://github.com/alecthomas/importmagic][importmagic]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "importmagic")
   #+END_SRC
*** [[https://github.com/ipython/ipython][ipython]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'python-language-prerequisites "ipython")
   #+END_SRC
* Packages
  :PROPERTIES:
  :CUSTOM_ID: python-packages
  :END:

  #+NAME: python-packages
  #+CAPTION: Packages for python
  - [[https://github.com/jorgenschaefer/elpy][elpy]] :: Elpy is the Emacs Python Development Environmen
  - [[https://github.com/paetzke/py-yapf.el][py-yapf]] :: Use yapf to beautify a Python buffer
  - [[https://github.com/proofit404/pyenv-mode][pyenv-mode]] :: Integrate pyenv with python-mode
  - [[https://github.com/ssbb/pyenv-mode-auto][pyenv-mode-auto]] :: Automatically activates pyenv version
  - [[https://github.com/Wilfred/pip-requirements.el][pip-requirements]] :: Major mode for editing pip requirements files
  - [[https://github.com/paetzke/py-isort.el][py-isort.el]] :: Integrates isort into Emacs.
  - [[https://github.com/Wilfred/pyimport][pyimport]] :: Manage Python imports from Emac
  - [[https://github.com/naiquevin/sphinx-doc.el][sphinx-doc]] ::  Generate Sphinx friendly docstrings for Python functions
* Python mode
    Python mode settings for Emacs

  #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref elpy
    (use-package elpy
        :ensure t
        :bind ("M-," . pop-tag-mark)
        :diminish elpy-mode "[E]"
        :commands (elpy-mode)
        :config (progn
                    (elpy-use-ipython)

                    (defun switch-to-jedi-flycheck-backend ()
                        (interactive)
                        (setq elpy-rpc-backend "jedi"))
                    (defun switch-to-rope-flycheck-backend ()
                        (interactive)
                        (setq elpy-rpc-backend "rope"))
                    (setq elpy-rpc-backend "jedi")))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref py-yapf
    (use-package py-yapf
        :ensure t
        :commands (py-yapf-buffer py-yapf-enable-on-save))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref pyenv-mode
        (use-package pyenv-mode
            :ensure t
            :diminish "[V]"
            :init
            (progn
                (use-package pyenv-mode-auto
                    :ensure t
                    :init
                    (progn
                        (add-hook 'switch-buffer-functions
                                  (lambda (prev cur) (pyenv-mode-auto-hook)))
                        (add-hook 'find-file-hook 'pyenv-mode-auto-hook)))

                (setq pyenv-show-active-python-in-modeline t)))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref sphinx-doc
    (use-package sphinx-doc
        :ensure t
        :commands (sphinx-doc-mode))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref pyimport
    (use-package pyimport
        :ensure t
        :commands (pyimport-insert-missing pyimport-insert-missing))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref py-isort
    (use-package py-isort
        :ensure t
        :commands (py-isort-before-save py-isort-buffer py-isort-region))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref python-hook
    (defun python-hook ()
        (elpy-mode)
        (pyenv-mode)
        (flycheck-mode)
        (semantic-mode)
        (hs-minor-mode)
        (sphinx-doc-mode)
        (pyenv-mode-auto-hook)

        (setq flycheck-checker 'python-pylint
              flycheck-checker-error-threshold 400

              py-python-command "python"
              elpy-rpc-python-command "python"
              python-shell-interpreter "ipython"
              python-shell-interpreter-args "--simple-prompt --pprint")

        (add-to-list
         'python-shell-completion-native-disabled-interpreters "python")

        (add-to-list (make-local-variable 'company-backends)
                     '(elpy-company-backend company-yasnippet)))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :noweb tangle
    (use-package python-mode
        :ensure t
        :bind (:map elpy-mode-map
                    ("C-C TAB" . hs-toggle-hiding))
        :init
        (progn
            <<elpy>>
            <<py-yapf>>
            <<pyenv-mode>>
            <<py-isort>>
            <<pyimport>>
            <<sphinx-doc>>

            <<python-hook>>
            (add-hook 'python-mode-hook 'python-hook)))
  #+END_SRC

* Pip requirments
  Pip requirments for Emacs
  #+BEGIN_SRC emacs-lisp
    (use-package pip-requirements
        :ensure t
        :mode (("requirements.txt$" . pip-requirements-mode)
               ("requirements.pip$" . pip-requirements-mode))
        :init
        (progn
            (copy-hooks-to text-mode-hook 'pip-requirements-mode)))
  #+END_SRC
