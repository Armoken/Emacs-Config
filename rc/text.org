* Line numbering
** Left panel
   #+BEGIN_SRC emacs-lisp
     (use-package nlinum
       :ensure t
       :commands (nlinum-mode)
       :init (progn
               (add-hook 'text-mode-hook '(lambda () (nlinum-mode t)))
               (add-hook 'prog-mode-hook '(lambda () (nlinum-mode t))))
       :config (progn
                 (setq nlinum-format "%4d  ")
                 (setq nlinum-highlight-current-line t)))
   #+END_SRC

** Modeline
   #+BEGIN_SRC emacs-lisp
     (line-number-mode t)
     (column-number-mode t)
   #+END_SRC

* Undo tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
        :ensure t
        :bind (("C-x u" . undo-tree-visualize))
        :diminish undo-tree-mode
        :config
        (progn
            (setq undo-tree-visualizer-timestamps nil
                  undo-tree-visualizer-diff       nil)

            (defadvice undo-tree-visualize
                    (around undo-tree-split-side-by-side activate)
                "Split undo-tree side-by-side."
                (let ((split-height-threshold nil)
                      (split-width-threshold 0))
                    ad-do-it))

            (global-undo-tree-mode)))

  #+END_SRC

* Jump to things in Emacs tree-style
  #+BEGIN_SRC emacs-lisp
    (use-package avy
        :ensure t
        :bind (("C-;"   . avy-goto-char-2)      ;; I use this most frequently
               ("C-'"   . avy-goto-line)        ;; Consistent with ivy-avy
               ("M-g c" . avy-goto-char)
               ("M-g e" . avy-goto-word-0)      ;; lots of candidates
               ("M-g g" . avy-goto-line)        ;; digits behave like goto-line
               ("M-g w" . avy-goto-word-1)      ;; first character of the word
               ("M-g (" . avy-goto-open-paren)
               ("M-g )" . avy-goto-close-paren)
               ("M-g P" . avy-pop-mark))
        :config
        ;; case sensitive makes selection easier
        (setq avy-case-fold-search nil)

        (avy-setup-default))
  #+END_SRC

* Current line hightlight
  #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode 1)
  #+END_SRC

* Common clipboard with X Server
  #+BEGIN_SRC emacs-lisp
    (setq select-enable-clipboard t)
  #+END_SRC

* Automatic line wrapping
  This package provides the `adaptive-wrap-prefix-mode' minor mode which sets
  the wrap-prefix property on the fly so that single-long-line paragraphs get
  word-wrapped in a way similar to what you'd get with M-q using
  adaptive-fill-mode, but without actually changing the buffer's text.

  #+BEGIN_SRC emacs-lisp
    (use-package adaptive-wrap
      :ensure t
      :commands (adaptive-wrap-prefix-mode)
      :init
      (progn
        (add-hook 'visual-line-mode-hook #'adaptive-wrap-prefix-mode))
      :config
      (progn
        (setq-default adaptive-wrap-extra-indent 2)))

    (setq word-wrap t)
    (diminish 'visual-line-mode)
    (add-hook 'text-mode-hook #'visual-line-mode)
    (add-hook 'prog-mode-hook #'visual-line-mode)

  #+END_SRC

* Delete Selection mode
  From Emacs manual: If you enable Delete Selection mode, a minor mode,
  then inserting text while the mark is active causes the selected text
  to be deleted first. This also deactivates the mark. Many graphical
  applications follow this convention, but Emacs does not.

  #+BEGIN_SRC emacs-lisp
    (delete-selection-mode t)
  #+END_SRC

* Display in the modeline search information
  #+BEGIN_SRC emacs-lisp
    (use-package anzu
      :ensure t
      :diminish anzu-mode
      :init (progn
              (global-anzu-mode)))
  #+END_SRC

* Functions for making text pretty
  #+BEGIN_SRC emacs-lisp
    (defun untabify-buffer ()
      "Remove tabs from buffer."
      (interactive)
      (untabify (point-min) (point-max)))

    (defun indent-buffer ()
      "Indent region."
      (interactive)
      (indent-region (point-min) (point-max)))

    (defun cleanup-buffer-notabs ()
      "Perform a bunch of operations on the whitespace content of a buffer.
    Remove tabs."
      (interactive)
      (indent-buffer)
      (untabify-buffer)
      (delete-trailing-whitespace)
      nil)

    (defun cleanup-buffer-tabs ()
      "Perform a bunch of operations on the whitespace content of a buffer.
    Dont remove tabs."
      (interactive)
      (indent-buffer)
      (delete-trailing-whitespace)
      nil)
  #+END_SRC

* Fixing up whitespaces only for touched lines
  #+BEGIN_SRC emacs-lisp
    (use-package ws-butler
      :diminish ws-butler-mode
      :ensure t
      :commands (ws-butler-mode)
      :init
      (progn
        (add-hook 'text-mode-hook 'ws-butler-mode)
        (add-hook 'prog-mode-hook 'ws-butler-mode)))
  #+END_SRC

* Highlight expressions between {},[],()
  #+BEGIN_SRC emacs-lisp
    (use-package paren
      :config
      (progn
        (setq show-paren-delay 0)
        (setq show-paren-style 'expression)
        (show-paren-mode)))
  #+END_SRC

* Ag
  #+BEGIN_SRC emacs-lisp
    (use-package ag
      :ensure t
      :commands (ag
                 ag-files
                 ag-regexp
                 ag-project
                 ag-project-files
                 ag-project-regexp))
  #+END_SRC
