#+TITLE: Text
#+OPTIONS: toc:nil num:nil ^:nil

Common settings for almost all text modes

* Configuration
** Auto revert mode
   Revert buffers when files on disk change

   #+BEGIN_SRC emacs-lisp
     (use-package autorevert
         :diminish auto-revert-mode)
   #+END_SRC

** Abbrev mode
   Word abbreviations mode. In Abbrev mode, inserting an abbreviation causes
   it to expand and be replaced by its expansion

   #+BEGIN_SRC emacs-lisp
     (use-package abbrev
         :diminish abbrev-mode)
   #+END_SRC

** Line numbering
*** Left panel
    Interface for display-line-numbers

    #+BEGIN_SRC emacs-lisp
      (use-package display-line-numbers
	  :config
	  (progn
	      (setq display-line-numbers-width-start 5)))
    #+END_SRC

*** Modeline
    #+BEGIN_SRC emacs-lisp
      (line-number-mode t)
      (column-number-mode t)
    #+END_SRC

** [[http://www.dr-qubit.org/undo-tree/undo-tree.el][Undo tree]]                                      :global_hotkeys:
   Treat undo history as a tree

   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
         :ensure t
         :bind (("C-x u" . undo-tree-visualize))
         :diminish undo-tree-mode
         :config
         (progn
             (global-undo-tree-mode)))
   #+END_SRC

** [[https://github.com/abo-abo/avy][Jump to things in Emacs tree-style]]             :global_hotkeys:
   Jump to arbitrary positions in visible text and select text quickly

   #+BEGIN_SRC emacs-lisp
     (use-package avy
         :ensure t
         :bind (("C-;"   . avy-goto-char-2)
                ("C-'"   . avy-goto-line)
                ("M-g c" . avy-goto-char)
                ("M-g e" . avy-goto-word-0)
                ("M-g g" . avy-goto-line)
                ("M-g w" . avy-goto-word-1)
                ("M-g (" . avy-goto-open-paren)
                ("M-g )" . avy-goto-close-paren)
                ("M-g P" . avy-pop-mark))
         :config
         (progn
             ;; case sensitive makes selection easier
             (setq avy-case-fold-search nil)

             (avy-setup-default)))
   #+END_SRC
** Current line hightlight
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode 1)
   #+END_SRC

** Common clipboard with X Server
   #+BEGIN_SRC emacs-lisp
     (setq select-enable-clipboard t)
   #+END_SRC

** [[https://github.com/hbin/smart-shift][Region shifting]]
   Smart shift text left/right.

   #+BEGIN_SRC emacs-lisp
     (use-package smart-shift
       :ensure t
       :diminish smart-shift-mode
       :bind
       (:map smart-shift-mode-map
             ("<C-up>" . smart-shift-up)
             ("<C-down>" . smart-shift-down)
             ("<C-left>" . smart-shift-left)
             ("<C-right>" . smart-shift-right)))
   #+END_SRC

** Visual line mode
  #+BEGIN_SRC emacs-lisp
    (setq word-wrap t)
    (diminish 'visual-line-mode)
  #+END_SRC

** [[http://elpa.gnu.org/packages/adaptive-wrap.html][Automatic line wrapping]]
   This package provides the `adaptive-wrap-prefix-mode' minor mode which sets
   the wrap-prefix property on the fly so that single-long-line paragraphs get
   word-wrapped in a way similar to what you'd get with M-q using
   adaptive-fill-mode, but without actually changing the buffer's text.

   #+BEGIN_SRC emacs-lisp
     (use-package adaptive-wrap
         :ensure t
         :diminish adaptive-wrap-prefix-mode
         :hook (visual-line-mode . adaptive-wrap-prefix-mode)
         :commands (adaptive-wrap-prefix-mode)
         :config
         (progn
             (setq-default adaptive-wrap-extra-indent 2)))
   #+END_SRC

** Disable automatic line breaking
   When Auto Fill mode is enabled, inserting a space at a column
   beyond ‘current-fill-column’ automatically breaks the line at a
   previous space.

   This minor-mode have bad behavior almost in all modes.

   #+BEGIN_SRC emacs-lisp
     (diminish 'auto-fill-function)

     (auto-fill-mode            -1)
     (remove-hook 'text-mode-hook #'turn-on-auto-fill)
   #+END_SRC

** Delete Selection mode
   If you enable Delete Selection mode, a minor mode,
   then inserting text while the mark is active causes the selected text
   to be deleted first. This also deactivates the mark. Many graphical
   applications follow this convention, but Emacs does not.

   #+BEGIN_SRC emacs-lisp
     (delete-selection-mode t)
   #+END_SRC

** [[https://github.com/syohex/emacs-anzu][Display in the modeline search information]]     :global_hotkeys:
   Show number of matches in mode-line while searching

   #+BEGIN_SRC emacs-lisp
     (use-package anzu
         :ensure t
         :diminish anzu-mode
         :bind (([remap query-replace]        . #'anzu-query-replace)
                ([remap query-replace-regexp] . #'anzu-query-replace-regexp)

                :map isearch-mode-map
                ([remap isearch-query-replace]        . #'anzu-isearch-query-replace)
                ([remap isearch-query-replace-regexp] . #'anzu-isearch-query-replace-regexp))
         :init
         (progn
             (global-anzu-mode)))
   #+END_SRC

** [[https://github.com/lewang/ws-butler][Fixing up whitespaces only for touched lines]]
   Unobtrusively remove trailing whitespace

   #+BEGIN_SRC emacs-lisp
     (use-package ws-butler
         :diminish ws-butler-mode
         :ensure t
         :commands (ws-butler-mode))
   #+END_SRC

** Highlight expressions between {},[],()
   Highlight matching paren

   #+BEGIN_SRC emacs-lisp
     (use-package paren
       :config
       (progn
         (setq show-paren-delay 0)
         (setq show-paren-style 'expression)

         (show-paren-mode)))
   #+END_SRC

** [[https://github.com/Fuco1/smartparens][Automatically pairs braces and quotes]]
   Minor mode for Emacs that deals with parens pairs and tries to be smart
   about it

   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
         :ensure t
         :diminish smartparens-mode "[SP]"
         :commands (smartparens-mode smartparens-strict-mode)
         :config
         (progn
             (sp-pair "'" "'" :actions nil)))
   #+END_SRC

** [[https://github.com/cosmicexplorer/helm-rg][Ripgrep]]                                        :global_hotkeys:
   A helm interface to ripgrep

   #+BEGIN_SRC emacs-lisp
     (use-package helm-rg
         :ensure t
         :bind (("C-c h s" . helm-rg))
         :commands (helm-rg
                    helm-projectile-rg))
   #+END_SRC

** Set newline at the end of file
 #+BEGIN_SRC emacs-lisp
   (setq require-final-newline t)
   (setq next-line-add-newlines t)
 #+END_SRC

** Spell checking
   #+BEGIN_SRC emacs-lisp
     (use-package flyspell)
   #+END_SRC

** Outline mode
   #+BEGIN_SRC emacs-lisp
     (use-package outline
         :diminish outline-minor-mode "[o]"
         :bind (:map outline-minor-mode-map
                     ("C-c f TAB" . ayrc/outline-toggle-entry)
                     ;; ("C-c f h"   . hs-hide-all)
                     ;; ("C-c f s"   . hs-show-all)
                     )
         :config
         (progn
             (defun ayrc/outline-toggle-entry ()
                 (interactive)
                 "Toggle outline hiding for the entry under the cursor"
                 (if (progn
                           (setq cpos_save (point))
                           (end-of-line)
                           (get-char-property (point) 'invisible))
                        (progn
                            (outline-hide-subtree)
                            (goto-char cpos_save))
                        (progn
                            (outline-hide-subtree)
                            (goto-char cpos_save))))))
   #+END_SRC
** [[https://github.com/alpaker/fill-column-indicator][Fill column indicator]]
   Graphically indicate the fill column

   #+BEGIN_SRC emacs-lisp
     (use-package fill-column-indicator
         :ensure t
         :commands (fci-mode)
         :config
         (progn
             (setq fci-rule-column 79)))
   #+END_SRC
